// this file was generated by generate_is_unicode_letter.py
#pragma once
#include "toml_common.h"

namespace TOML_NAMESPACE::impl
{
	[[nodiscard]]
	constexpr bool is_unicode_letter(char32_t codepoint) noexcept
	{
		if (codepoint < U'\u00AA' || codepoint > U'\U0002FA1D')
			return false;

		TOML_ASSUME(codepoint >= U'\u00AA');
		TOML_ASSUME(codepoint <= U'\U0002FA1D');
		switch ((static_cast<uint32_t>(codepoint) - 0xAAu) / 4062u)
		{
			case 0u: 
			{
				TOML_ASSUME(codepoint >= U'\u00AA');
				TOML_ASSUME(codepoint <= U'\u1087');
				switch ((static_cast<uint32_t>(codepoint) - 0xAAu) / 64u)
				{
					case 0u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xAAull)) & 0b1111111111111111110111111111111111111111110000010000100000000001ull;
					case 1u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xEAull)) & 0b1111111111111111111111111111111111111111111111111101111111111111ull;
					case 2u: return true;
					case 3u: return true;
					case 4u: return true;
					case 5u: return true;
					case 6u: return true;
					case 7u: return true;
					case 8u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x2AAull)) & 0b0000011111000000000000001111111111110000111111111111111111111111ull;
					case 9u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x2EAull)) & 0b0000000000000000000000000000000000000000000000000000000000010100ull;
					case 10u: return false;
					case 11u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x36Aull)) & 0b1111111011111111111111111111010111010000001011110011011111000000ull;
					case 12u: return true;
					case 13u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x3EAull)) & 0b1111111111111111111111111111111111111111111111111110111111111111ull;
					case 14u: return true;
					case 15u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x46Aull)) & 0b1111111111111111111111111111111100000000111111111111111111111111ull;
					case 16u: return true;
					case 17u: return true;
					case 18u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x52Aull)) & 0b1111111111000000100111111111111111111111111111111111111110111111ull;
					case 19u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x56Aull)) & 0b0000000000000000000000000000000001111111111111111111111111111111ull;
					case 20u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x5AAull)) & 0b1111111111111111111111111100000000000000000000000000000000000000ull;
					case 21u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x5EAull)) & 0b1111111111000000000000000000000000000000000000000000000111100001ull;
					case 22u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x62Aull)) & 0b0000000000000000000000000000000111111111111111111111111111111111ull;
					case 23u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x66Aull)) & 0b1111111111111111111111111111111111111111111111111111111110110000ull;
					case 24u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x6AAull)) & 0b0001100000000000000010111111111111111111111111111111111111111111ull;
					case 25u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x6EAull)) & 0b1111111111111111111111110100000000000000001001110000000000110000ull;
					case 26u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x72Aull)) & 0b1111111111111111111111111111100000000000000000000000000000111111ull;
					case 27u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x76Aull)) & 0b0000111111111111111111111111111111111111111111111111111111111111ull;
					case 28u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x7AAull)) & 0b1111111111111111111111111111111100000000000000000000000010000000ull;
					case 29u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x7EAull)) & 0b0100010000000001000011111111111111111111110000010000110000000001ull;
					case 30u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x82Aull)) & 0b1111111111000000011111111111111111111111110000000000000000000000ull;
					case 31u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x86Aull)) & 0b1111111111000000000000000000000000000000000000000000000000000001ull;
					case 32u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x8AAull)) & 0b0000000000000000000000000000000000000000000011111111011111111111ull;
					case 33u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x8EAull)) & 0b1111111111111111111111111111111111111100000000000000000000000000ull;
					case 34u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x92Aull)) & 0b0000000011111111110000000100000000000000000010001111111111111111ull;
					case 35u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x96Aull)) & 0b0111111111111111111111100110011111111000011111111111111110000000ull;
					case 36u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x9AAull)) & 0b0000000011101100000000000001000000000000000010001111000101111111ull;
					case 37u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x9EAull)) & 0b0111111111111111111111100110000111111000000001000000000011000000ull;
					case 38u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA2Aull)) & 0b0000000000010111100000000000000000000000000000001101101101111111ull;
					case 39u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA6Aull)) & 0b0111111111111111111111101110111111111000000000000000011100000000ull;
					case 40u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xAAAull)) & 0b0000000011000000000000000100000000000000000010001111101101111111ull;
					case 41u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xAEAull)) & 0b0111111111111111111111100110011111111000000000001000000000000000ull;
					case 42u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xB2Aull)) & 0b0000000011101100000000000000000000000000000010001111101101111111ull;
					case 43u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xB6Aull)) & 0b1100011000110101100011110111000111111010000000000000000010000000ull;
					case 44u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xBAAull)) & 0b0000000000000000000000000100000000000000000000001111111111110001ull;
					case 45u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xBEAull)) & 0b0111111111111111111111110111011111111000000000000000000000000000ull;
					case 46u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xC2Aull)) & 0b0000000011000001110000000000000000000000000010001111111111111111ull;
					case 47u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xC6Aull)) & 0b0111111111111111111111110111011111111000010000000000000000000000ull;
					case 48u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xCAAull)) & 0b0000000011010000000000000000000000000000000010001111101111111111ull;
					case 49u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xCEAull)) & 0b1111111111111111111111110111011111111000000000000000000110000000ull;
					case 50u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xD2Aull)) & 0b0000000011100000000111000001000000000000000010011111111111111111ull;
					case 51u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xD6Aull)) & 0b1111111111111111000111111111111111111000001111110000000000000000ull;
					case 52u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xDAAull)) & 0b0000000000000000000000000000000000011111110010111111111011111111ull;
					case 53u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xDEAull)) & 0b1111111111111111111111111111111111111111100000000000000000000000ull;
					case 54u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xE2Aull)) & 0b0000000000000000000000000000000000011111110000000000001101111111ull;
					case 55u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xE6Aull)) & 0b1110101111111111111111111111110111110101100000000000000000000000ull;
					case 56u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xEAAull)) & 0b0000000000111100000000000000000000010111110010000000001101111111ull;
					case 57u: return codepoint == U'\u0F00';
					case 58u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xF2Aull)) & 0b1111111111111111111111111111111110111111110000000000000000000000ull;
					case 59u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xF6Aull)) & 0b0000000000000000000000000000011111000000000000000000000000000111ull;
					case 60u: return false;
					case 61u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xFEAull)) & 0b1111111111111111111111111111111111111111110000000000000000000000ull;
					case 62u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x102Aull)) & 0b0001100010001111000011111100000000000000001000000000000000000001ull;
					case 63u: return (1u << (static_cast<uint32_t>(codepoint) - 0x106Au)) & 0b00000000111111111111100001110000u;
					TOML_NO_DEFAULT_CASE;
				}
				TOML_UNREACHABLE;
				// total codepoints in chunk: 2273
			}
			case 1u: 
			{
				TOML_ASSUME(codepoint >= U'\u1088');
				TOML_ASSUME(codepoint <= U'\u2065');
				switch ((static_cast<uint32_t>(codepoint) - 0x1088u) / 64u)
				{
					case 0u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1088ull)) & 0b1011111111111111111111111111111111111111000000000000000001000000ull;
					case 1u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x10C8ull)) & 0b1111111111110111111111111111111111111111111111111111111100100000ull;
					case 2u: return true;
					case 3u: return true;
					case 4u: return true;
					case 5u: return true;
					case 6u: return true;
					case 7u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1248ull)) & 0b1111111111111111111111111111111111111111001111010111111100111101ull;
					case 8u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1288ull)) & 0b0011110101111111001111011111111111111111111111111111111100111101ull;
					case 9u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x12C8ull)) & 0b1111111111111111111111111111111111111111111111110111111111111111ull;
					case 10u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1308ull)) & 0b1111111111111111111111111111111111111111111111110011110111111111ull;
					case 11u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1348ull)) & 0b1111111100000000000000000000000000000000000001111111111111111111ull;
					case 12u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1388ull)) & 0b1111111111111111111111111111111111111111000000000000000011111111ull;
					case 13u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x13C8ull)) & 0b1111111000111111001111111111111111111111111111111111111111111111ull;
					case 14u: return true;
					case 15u: return true;
					case 16u: return true;
					case 17u: return true;
					case 18u: return true;
					case 19u: return true;
					case 20u: return true;
					case 21u: return true;
					case 22u: return true;
					case 23u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1648ull)) & 0b1111111011111111111111111001111111111111111111111111111111111111ull;
					case 24u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1688ull)) & 0b1111111111111111111111111111111111111111000001111111111111111111ull;
					case 25u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x16C8ull)) & 0b1111111100000001111111100000011111111111111111111111111111111111ull;
					case 26u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1708ull)) & 0b1111111100000000000000111111111111111111000000000000001111011111ull;
					case 27u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1748ull)) & 0b1111111100000000000000011101111111111111000000000000001111111111ull;
					case 28u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1788ull)) & 0b0000000000000000000011111111111111111111111111111111111111111111ull;
					case 29u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x17C8ull)) & 0b0000000000000000000000000000000000000000000100001000000000000000ull;
					case 30u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1808ull)) & 0b1111111111111111111111111111111111111111000000000000000000000000ull;
					case 31u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1848ull)) & 0b1001111100000001111111111111111111111111111111111111111111111111ull;
					case 32u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1888ull)) & 0b1111111111111111111111110000010111111111111111111111111111111111ull;
					case 33u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x18C8ull)) & 0b1111111100000000001111111111111111111111111111111111111111111111ull;
					case 34u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1908ull)) & 0b0000000000000000000000000000000000000000011111111111111111111111ull;
					case 35u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1948ull)) & 0b1111111100000000000111110011111111111111111111111111111100000000ull;
					case 36u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1988ull)) & 0b1111111111111111111111110000111111111111111111111111111111111111ull;
					case 37u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x19C8ull)) & 0b1111111100000000000000000000000000000000000000000000000000000011ull;
					case 38u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1A08ull)) & 0b1111111111111111111111111111111111111111000000000111111111111111ull;
					case 39u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1A48ull)) & 0b0000000000000000000000000000000000000000000000000001111111111111ull;
					case 40u: return codepoint == U'\u1AA7';
					case 41u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1AC8ull)) & 0b1110000000000000000000000000000000000000000000000000000000000000ull;
					case 42u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1B08ull)) & 0b1110000000000000000011111111111111111111111111111111111111111111ull;
					case 43u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1B48ull)) & 0b1111100000000000000000000000000000000000000000000000000000001111ull;
					case 44u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1B88ull)) & 0b1111111111111100000000001100000000000001111111111111111111111111ull;
					case 45u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1BC8ull)) & 0b1111111100000000000000000000000000111111111111111111111111111111ull;
					case 46u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1C08ull)) & 0b0000000000000000000000000000000000001111111111111111111111111111ull;
					case 47u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1C48ull)) & 0b1111111100111111111111111111111111111111111111000000000011100000ull;
					case 48u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1C88ull)) & 0b0000000011100111111111111111111111111111111111111111111100000001ull;
					case 49u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1CC8ull)) & 0b1111111100000100011011111101111000000000000000000000000000000000ull;
					case 50u: return true;
					case 51u: return true;
					case 52u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1D88ull)) & 0b0000000011111111111111111111111111111111111111111111111111111111ull;
					case 53u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1DC8ull)) & 0b1111111100000000000000000000000000000000000000000000000000000000ull;
					case 54u: return true;
					case 55u: return true;
					case 56u: return true;
					case 57u: return true;
					case 58u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1F08ull)) & 0b0011111111111111111111111111111111111111001111110011111111111111ull;
					case 59u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1F48ull)) & 0b1111111100111111111111111111111111111111101010101111111100111111ull;
					case 60u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1F88ull)) & 0b1101110001011111110111111111111111111111111111111111111111111111ull;
					case 61u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1FC8ull)) & 0b0000000000011111110111000001111111111111000011111100111100011111ull;
					case 62u: return false;
					case 63u: return false;
					TOML_NO_DEFAULT_CASE;
				}
				TOML_UNREACHABLE;
				// total codepoints in chunk: 2998
			}
			case 2u: 
			{
				TOML_ASSUME(codepoint >= U'\u2066');
				TOML_ASSUME(codepoint <= U'\u3043');
				switch ((static_cast<uint32_t>(codepoint) - 0x2066u) / 64u)
				{
					case 0u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x2066ull)) & 0b0000000001111111111111000000000000000010000000000000100000000000ull;
					case 1u: return false;
					case 2u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x20E6ull)) & 0b0100000011111000101111111111001000010000000000000000000000000000ull;
					case 3u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x2126ull)) & 0b0000000000000000000000010000111110000011110011111111111011110101ull;
					case 4u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x2166ull)) & 0b0000000000000000000000000000000001100000000000000000000000000000ull;
					case 5u: return false;
					case 6u: return false;
					case 7u: return false;
					case 8u: return false;
					case 9u: return false;
					case 10u: return false;
					case 11u: return false;
					case 12u: return false;
					case 13u: return false;
					case 14u: return false;
					case 15u: return false;
					case 16u: return false;
					case 17u: return false;
					case 18u: return false;
					case 19u: return false;
					case 20u: return false;
					case 21u: return false;
					case 22u: return false;
					case 23u: return false;
					case 24u: return false;
					case 25u: return false;
					case 26u: return false;
					case 27u: return false;
					case 28u: return false;
					case 29u: return false;
					case 30u: return false;
					case 31u: return false;
					case 32u: return false;
					case 33u: return false;
					case 34u: return false;
					case 35u: return false;
					case 36u: return false;
					case 37u: return false;
					case 38u: return false;
					case 39u: return false;
					case 40u: return false;
					case 41u: return false;
					case 42u: return false;
					case 43u: return false;
					case 44u: return false;
					case 45u: return false;
					case 46u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x2BE6ull)) & 0b1111111111111111111111111111111111111100000000000000000000000000ull;
					case 47u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x2C26ull)) & 0b1111110111111111111111111111111111111111111111111111110111111111ull;
					case 48u: return true;
					case 49u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x2CA6ull)) & 0b0111111111111111111111111111111111111111111111111111111111111111ull;
					case 50u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x2CE6ull)) & 0b1111111111111111111111111111111111111100000000000011000111100000ull;
					case 51u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x2D26ull)) & 0b1111111111111111111111111111111111111111111111111111110010000010ull;
					case 52u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x2D66ull)) & 0b1111110000000001111111111111111111111100000000000000001000000011ull;
					case 53u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x2DA6ull)) & 0b0000000111111101111111011111110111111101111111011111110111111101ull;
					case 54u: return false;
					case 55u: return codepoint == U'\u2E2F';
					case 56u: return false;
					case 57u: return false;
					case 58u: return false;
					case 59u: return false;
					case 60u: return false;
					case 61u: return false;
					case 62u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x2FE6ull)) & 0b0000000000000000000000000000000110000000000000000000000000000000ull;
					case 63u: return (1u << (static_cast<uint32_t>(codepoint) - 0x3026u)) & 0b00111000011000001111100000000000u;
					TOML_NO_DEFAULT_CASE;
				}
				TOML_UNREACHABLE;
				// total codepoints in chunk: 485
			}
			case 3u: 
			{
				TOML_ASSUME(codepoint >= U'\u3044');
				TOML_ASSUME(codepoint <= U'\u4021');
				switch ((static_cast<uint32_t>(codepoint) - 0x3044u) / 64u)
				{
					case 0u: return true;
					case 1u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x3084ull)) & 0b1111111111111111111111111111111111101110000001111111111111111111ull;
					case 2u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x30C4ull)) & 0b0000111101111111111111111111111111111111111111111111111111111111ull;
					case 3u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x3104ull)) & 0b1111111111111111111011111111111111111111111111111111111111111110ull;
					case 4u: return true;
					case 5u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x3184ull)) & 0b0000000001111111111111111111111111110000000000000000011111111111ull;
					case 6u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x31C4ull)) & 0b0000111111111111111100000000000000000000000000000000000000000000ull;
					case 7u: return false;
					case 8u: return false;
					case 9u: return false;
					case 10u: return false;
					case 11u: return false;
					case 12u: return false;
					case 13u: return false;
					case 14u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x33C4ull)) & 0b1111000000000000000000000000000000000000000000000000000000000000ull;
					case 15u: return true;
					case 16u: return true;
					case 17u: return true;
					case 18u: return true;
					case 19u: return true;
					case 20u: return true;
					case 21u: return true;
					case 22u: return true;
					case 23u: return true;
					case 24u: return true;
					case 25u: return true;
					case 26u: return true;
					case 27u: return true;
					case 28u: return true;
					case 29u: return true;
					case 30u: return true;
					case 31u: return true;
					case 32u: return true;
					case 33u: return true;
					case 34u: return true;
					case 35u: return true;
					case 36u: return true;
					case 37u: return true;
					case 38u: return true;
					case 39u: return true;
					case 40u: return true;
					case 41u: return true;
					case 42u: return true;
					case 43u: return true;
					case 44u: return true;
					case 45u: return true;
					case 46u: return true;
					case 47u: return true;
					case 48u: return true;
					case 49u: return true;
					case 50u: return true;
					case 51u: return true;
					case 52u: return true;
					case 53u: return true;
					case 54u: return true;
					case 55u: return true;
					case 56u: return true;
					case 57u: return true;
					case 58u: return true;
					case 59u: return true;
					case 60u: return true;
					case 61u: return true;
					case 62u: return true;
					case 63u: return true;
					TOML_NO_DEFAULT_CASE;
				}
				TOML_UNREACHABLE;
				// total codepoints in chunk: 3466
			}
			case 4u: return codepoint <= U'\u4DB4' || codepoint >= U'\u4E00';
			case 5u: return true;
			case 6u: return true;
			case 7u: return true;
			case 8u: return true;
			case 9u: return true;
			case 10u: 
			{
				TOML_ASSUME(codepoint >= U'\u9F56');
				TOML_ASSUME(codepoint <= U'\uAF33');
				switch ((static_cast<uint32_t>(codepoint) - 0x9F56u) / 64u)
				{
					case 0u: return true;
					case 1u: return true;
					case 2u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x9FD6ull)) & 0b1111111111111111111111000000000000000001111111111111111111111111ull;
					case 3u: return true;
					case 4u: return true;
					case 5u: return true;
					case 6u: return true;
					case 7u: return true;
					case 8u: return true;
					case 9u: return true;
					case 10u: return true;
					case 11u: return true;
					case 12u: return true;
					case 13u: return true;
					case 14u: return true;
					case 15u: return true;
					case 16u: return true;
					case 17u: return true;
					case 18u: return true;
					case 19u: return true;
					case 20u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA456ull)) & 0b0000000001111111111111111111111111111111111111111111111111111111ull;
					case 21u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA496ull)) & 0b1111110000000000000000000000000000000000000000000000000000000000ull;
					case 22u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA4D6ull)) & 0b1111111111111111111111001111111111111111111111111111111111111111ull;
					case 23u: return true;
					case 24u: return true;
					case 25u: return true;
					case 26u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA5D6ull)) & 0b1111110001111111111111111111111111111111111111111111111111111111ull;
					case 27u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA616ull)) & 0b1111111111111111111111000000000000000000001100000000001111111111ull;
					case 28u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA656ull)) & 0b1111111111111111111111100000000000000001111111111111111111111111ull;
					case 29u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA696ull)) & 0b1111111111111111111111111111111111111111111111111111110011111111ull;
					case 30u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA6D6ull)) & 0b0000000000000000000000000000000000000000000000001111111111111111ull;
					case 31u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA716ull)) & 0b1111111111111111111111111111111111111111111111111111001111111110ull;
					case 32u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA756ull)) & 0b1111111111100111111111111111111111111111111111111111111111111111ull;
					case 33u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA796ull)) & 0b0000000000000001111100111111111111111111111111111111111111111111ull;
					case 34u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA7D6ull)) & 0b1111111111011110111011111111111000000000000000000000000000000000ull;
					case 35u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA816ull)) & 0b1111111111111111111111000000000000000000000000000001111111111111ull;
					case 36u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA856ull)) & 0b1111111111111111111100000000000000111111111111111111111111111111ull;
					case 37u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA896ull)) & 0b0000000000000000000000000000000000111111111111111111111111111111ull;
					case 38u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA8D6ull)) & 0b1111111111110000000000011010001111110000000000000000000000000000ull;
					case 39u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA916ull)) & 0b0000000000000001111111111111111111111100000000001111111111111111ull;
					case 40u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA956ull)) & 0b1111111111111111110000000111111111111111111111111111110000000000ull;
					case 41u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA996ull)) & 0b0000001000000000000000000000000000011111111111111111111111111111ull;
					case 42u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xA9D6ull)) & 0b1111111111111111111111011111000000000011111111110111110000000000ull;
					case 43u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xAA16ull)) & 0b0000000000111111110111000000000000000000000001111111111111111111ull;
					case 44u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xAA56ull)) & 0b1111111111111111111111110001000111111111111111111111110000000000ull;
					case 45u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xAA96ull)) & 0b0000000000000000000101001111100110001011111111111111111111111111ull;
					case 46u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xAAD6ull)) & 0b1111100111111001111110000000000001110000000111111111110011100000ull;
					case 47u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xAB16ull)) & 0b1111111111111111111111111111111111111101111111011111110000000001ull;
					case 48u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xAB56ull)) & 0b1111111111111111111111111111111111111100000000111111111111011111ull;
					case 49u: return true;
					case 50u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xABD6ull)) & 0b1111111111111111111111000000000000000000000000000001111111111111ull;
					case 51u: return true;
					case 52u: return true;
					case 53u: return true;
					case 54u: return true;
					case 55u: return true;
					case 56u: return true;
					case 57u: return true;
					case 58u: return true;
					case 59u: return true;
					case 60u: return true;
					case 61u: return true;
					case 62u: return true;
					case 63u: return true;
					TOML_NO_DEFAULT_CASE;
				}
				TOML_UNREACHABLE;
				// total codepoints in chunk: 3444
			}
			case 11u: return true;
			case 12u: return true;
			case 13u: return codepoint <= U'\uD7A2' || (codepoint >= U'\uD7B0' && codepoint <= U'\uD7C6')
					|| (codepoint >= U'\uD7CB' && codepoint <= U'\uD7FB');
			case 14u: return false;
			case 15u: 
			{
				TOML_ASSUME(codepoint >= U'\uEEAC');
				TOML_ASSUME(codepoint <= U'\uFE89');
				switch ((static_cast<uint32_t>(codepoint) - 0xEEACu) / 64u)
				{
					case 0u: return false;
					case 1u: return false;
					case 2u: return false;
					case 3u: return false;
					case 4u: return false;
					case 5u: return false;
					case 6u: return false;
					case 7u: return false;
					case 8u: return false;
					case 9u: return false;
					case 10u: return false;
					case 11u: return false;
					case 12u: return false;
					case 13u: return false;
					case 14u: return false;
					case 15u: return false;
					case 16u: return false;
					case 17u: return false;
					case 18u: return false;
					case 19u: return false;
					case 20u: return false;
					case 21u: return false;
					case 22u: return false;
					case 23u: return false;
					case 24u: return false;
					case 25u: return false;
					case 26u: return false;
					case 27u: return false;
					case 28u: return false;
					case 29u: return false;
					case 30u: return false;
					case 31u: return false;
					case 32u: return false;
					case 33u: return false;
					case 34u: return false;
					case 35u: return false;
					case 36u: return false;
					case 37u: return false;
					case 38u: return false;
					case 39u: return false;
					case 40u: return false;
					case 41u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xF8ECull)) & 0b1111111111111111111111111111111111111111111100000000000000000000ull;
					case 42u: return true;
					case 43u: return true;
					case 44u: return true;
					case 45u: return true;
					case 46u: return true;
					case 47u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xFA6Cull)) & 0b1111111111111111111111111111111111111111111111111111111111110011ull;
					case 48u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xFAACull)) & 0b0000000000000000001111111111111111111111111111111111111111111111ull;
					case 49u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xFAECull)) & 0b1101111111111010000011111000000000000111111100000000000000000000ull;
					case 50u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xFB2Cull)) & 0b1111111111111111111111111111111111111101101101011111011111111111ull;
					case 51u: return true;
					case 52u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xFBACull)) & 0b1111111111111111111111111000000000000000000000000000000000111111ull;
					case 53u: return true;
					case 54u: return true;
					case 55u: return true;
					case 56u: return true;
					case 57u: return true;
					case 58u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xFD2Cull)) & 0b1111111111111111111111111111000000000000000000111111111111111111ull;
					case 59u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xFD6Cull)) & 0b1111111111111111111111111100111111111111111111111111111111111111ull;
					case 60u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xFDACull)) & 0b0000000000000000000000000000000000001111111111111111111111111111ull;
					case 61u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xFDECull)) & 0b0000000000000000000000000000000000000000000000001111111111110000ull;
					case 62u: return false;
					case 63u: return (1u << (static_cast<uint32_t>(codepoint) - 0xFE6Cu)) & 0b00111111111111111111110111110000u;
					TOML_NO_DEFAULT_CASE;
				}
				TOML_UNREACHABLE;
				// total codepoints in chunk: 1144
			}
			case 16u: 
			{
				TOML_ASSUME(codepoint >= U'\uFE8A');
				TOML_ASSUME(codepoint <= U'\U00010E67');
				switch ((static_cast<uint32_t>(codepoint) - 0xFE8Au) / 64u)
				{
					case 0u: return true;
					case 1u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xFECAull)) & 0b0000000000000111111111111111111111111111111111111111111111111111ull;
					case 2u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xFF0Aull)) & 0b1111111110000001111111111111111111111111100000000000000000000000ull;
					case 3u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xFF4Aull)) & 0b1111111111111111111111111111111111110000000000011111111111111111ull;
					case 4u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xFF8Aull)) & 0b0011111100011111111111111111111111111111111111111111111111111111ull;
					case 5u: return (1ull << (static_cast<uint64_t>(codepoint) - 0xFFCAull)) & 0b1111111111000000000000000000000000000000000001110011111100111111ull;
					case 6u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1000Aull)) & 0b1111111111101101111111111111111111011111111111111111111111111011ull;
					case 7u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1004Aull)) & 0b1111111111000000000000000000000000000000000011111111111111001111ull;
					case 8u: return true;
					case 9u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x100CAull)) & 0b0000000000000001111111111111111111111111111111111111111111111111ull;
					case 10u: return false;
					case 11u: return false;
					case 12u: return false;
					case 13u: return false;
					case 14u: return false;
					case 15u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1024Aull)) & 0b1111111111000000000000000000000000000000000000000000000000000000ull;
					case 16u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1028Aull)) & 0b1111111111111111111111111111111111111111110001111111111111111111ull;
					case 17u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x102CAull)) & 0b1111111111000000000000000000000000000000000000000000000001111111ull;
					case 18u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1030Aull)) & 0b1111111101111111111111111111100000000000001111111111111111111111ull;
					case 19u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1034Aull)) & 0b1111111111000000000011111111111111111111111111111111111111000000ull;
					case 20u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1038Aull)) & 0b1100001111111111111111111111111111111111110011111111111111111111ull;
					case 21u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x103CAull)) & 0b1111111111000000000000000000000000000000000000000000000000111111ull;
					case 22u: return true;
					case 23u: return true;
					case 24u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1048Aull)) & 0b1111111111111111111111111100000000000000000011111111111111111111ull;
					case 25u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x104CAull)) & 0b1111111111000011111111111111111111111111111111111100001111111111ull;
					case 26u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1050Aull)) & 0b1111111111111111111111111100000000111111111111111111111111111111ull;
					case 27u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1054Aull)) & 0b0000000000000000000000000000000000000011111111111111111111111111ull;
					case 28u: return false;
					case 29u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x105CAull)) & 0b1111111111000000000000000000000000000000000000000000000000000000ull;
					case 30u: return true;
					case 31u: return true;
					case 32u: return true;
					case 33u: return true;
					case 34u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1070Aull)) & 0b1111111111000000000111111111111111111111111111111111111111111111ull;
					case 35u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1074Aull)) & 0b0000000000000000000000000000000000111111110000000000111111111111ull;
					case 36u: return false;
					case 37u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x107CAull)) & 0b0100111111000000000000000000000000000000000000000000000000000000ull;
					case 38u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1080Aull)) & 0b1111111111100100011011111111111111111111111111111111111111111111ull;
					case 39u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1084Aull)) & 0b1111111111000000000111111111111111111111110000000000111111111111ull;
					case 40u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1088Aull)) & 0b0000000000000000000000000000000000000000000111111111111111111111ull;
					case 41u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x108CAull)) & 0b1111111111000000000011011111111111111111110000000000000000000000ull;
					case 42u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1090Aull)) & 0b0000000000000000111111111111111111111111110000000000111111111111ull;
					case 43u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1094Aull)) & 0b1111111111000000000000000000000000000000000000000000000000000000ull;
					case 44u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1098Aull)) & 0b0000000000110000001111111111111111111111111111111111111111111111ull;
					case 45u: return codepoint == U'\U00010A00';
					case 46u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x10A0Aull)) & 0b0000000000000000000011111111111111111111111111111011101111000000ull;
					case 47u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x10A4Aull)) & 0b1111111111000111111111111111111111111111110000000000000000000000ull;
					case 48u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x10A8Aull)) & 0b1011111111000000000000000000000000000000000001111111111111111111ull;
					case 49u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x10ACAull)) & 0b1111111111000000000000000000000000000111111111111111111111111111ull;
					case 50u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x10B0Aull)) & 0b1111111111000000000011111111111111111111111111111111111111111111ull;
					case 51u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x10B4Aull)) & 0b1111111111000000000000011111111111111111110000000000111111111111ull;
					case 52u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x10B8Aull)) & 0b0000000000000000000000000000000000000000000000000000000011111111ull;
					case 53u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x10BCAull)) & 0b1111111111000000000000000000000000000000000000000000000000000000ull;
					case 54u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x10C0Aull)) & 0b0111111111111111111111111111111111111111111111111111111111111111ull;
					case 55u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x10C4Aull)) & 0b1111111111000000000000000000000000000000000000000000000000000000ull;
					case 56u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x10C8Aull)) & 0b1111111111000000000000011111111111111111111111111111111111111111ull;
					case 57u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x10CCAull)) & 0b1111111111000000000000011111111111111111111111111111111111111111ull;
					case 58u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x10D0Aull)) & 0b0000000000000000000000000000000000000011111111111111111111111111ull;
					case 59u: return false;
					case 60u: return false;
					case 61u: return false;
					case 62u: return false;
					case 63u: return false;
					TOML_NO_DEFAULT_CASE;
				}
				TOML_UNREACHABLE;
				// total codepoints in chunk: 2114
			}
			case 17u: 
			{
				TOML_ASSUME(codepoint >= U'\U00010E68');
				TOML_ASSUME(codepoint <= U'\U00011E45');
				switch ((static_cast<uint32_t>(codepoint) - 0x10E68u) / 64u)
				{
					case 0u: return false;
					case 1u: return false;
					case 2u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x10EE8ull)) & 0b1000000000011111111111111111111111111111000000000000000000000000ull;
					case 3u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x10F28ull)) & 0b0000000000000000000000000000000000111111111111111111111100000000ull;
					case 4u: return false;
					case 5u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x10FA8ull)) & 0b1111111100000000000000000000000000000000000000000000000000000000ull;
					case 6u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x10FE8ull)) & 0b1111111111111111111111111111111111111000000000000111111111111111ull;
					case 7u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11028ull)) & 0b0000000000000000000000000000000000000000000000001111111111111111ull;
					case 8u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11068ull)) & 0b1111111111111111111111111111111111111000000000000000000000000000ull;
					case 9u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x110A8ull)) & 0b1111111111111111111111110000000000000000000000000000000011111111ull;
					case 10u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x110E8ull)) & 0b0111111111111111111111111111111111111000000000000000000000000001ull;
					case 11u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11128ull)) & 0b1111111111111111111111110000000000010000000000000000000000000000ull;
					case 12u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11168ull)) & 0b1111111111111111111111111111111111111000000000000100011111111111ull;
					case 13u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x111A8ull)) & 0b0000000000010100000000000000000000011110000000000000011111111111ull;
					case 14u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x111E8ull)) & 0b1111111111111111111110111111111111111111000000000000000000000000ull;
					case 15u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11228ull)) & 0b0000000000000000000000000000000000000000000000000000000000001111ull;
					case 16u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11268ull)) & 0b1111111110111111111111111011110101111111000000000000000000000000ull;
					case 17u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x112A8ull)) & 0b0000000001111111111111111111111111111111111111111111111100000001ull;
					case 18u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x112E8ull)) & 0b1111111111111111111110011001111111100000000000000000000000000000ull;
					case 19u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11328ull)) & 0b0000001111100000000000010000000000000000001000111110110111111101ull;
					case 20u: return false;
					case 21u: return false;
					case 22u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x113E8ull)) & 0b1111111111111111111111111111111111111111000000000000000000000000ull;
					case 23u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11428ull)) & 0b0000000010000000000000000000011110000000000000000001111111111111ull;
					case 24u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11468ull)) & 0b1111111111111111111111111111111111111111000000000000000000000000ull;
					case 25u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x114A8ull)) & 0b0000000000000000000000000000000010110000000000000000000011111111ull;
					case 26u: return false;
					case 27u: return false;
					case 28u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11568ull)) & 0b1111111111111111111111111111111111111111000000000000000000000000ull;
					case 29u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x115A8ull)) & 0b0000000000001111000000000000000000000000000000000000000001111111ull;
					case 30u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x115E8ull)) & 0b1111111111111111111111111111111111111111000000000000000000000000ull;
					case 31u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11628ull)) & 0b0000000000000000000000000000000000010000000000000000000011111111ull;
					case 32u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11668ull)) & 0b1111111111111111111111111111111111111111000000000000000000000000ull;
					case 33u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x116A8ull)) & 0b0000000000000000000000000000000000000000000000010000000000000111ull;
					case 34u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x116E8ull)) & 0b0000000000000111111111111111111111111111000000000000000000000000ull;
					case 35u: return false;
					case 36u: return false;
					case 37u: return false;
					case 38u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x117E8ull)) & 0b1111111111111111111111111111111111111111000000000000000000000000ull;
					case 39u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11828ull)) & 0b0000000000000000000000000000000000000000000000000000000000001111ull;
					case 40u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11868ull)) & 0b1111111100000000000000000000000000000000000000000000000000000000ull;
					case 41u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x118A8ull)) & 0b0000000011111111111111111111111111111111111111111111111111111111ull;
					case 42u: return codepoint == U'\U000118FF';
					case 43u: return false;
					case 44u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11968ull)) & 0b1111111100000000000000000000000000000000000000000000000000000000ull;
					case 45u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x119A8ull)) & 0b0000101000000000000000011111111111111111111111111111111111111100ull;
					case 46u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x119E8ull)) & 0b1111111111111111111111111111100000000001000000000000000000000000ull;
					case 47u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11A28ull)) & 0b1111111111110000000000010000000000000000000001000000011111111111ull;
					case 48u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11A68ull)) & 0b0000000000100000000000000000001111111111111111111111111111111111ull;
					case 49u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11AA8ull)) & 0b1111111111111111111111111111111111111111000000000000000000000000ull;
					case 50u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11AE8ull)) & 0b0000000000000000000000000000000000000000000000011111111111111111ull;
					case 51u: return false;
					case 52u: return false;
					case 53u: return false;
					case 54u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11BE8ull)) & 0b1111111111111111111111111111110111111111000000000000000000000000ull;
					case 55u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11C28ull)) & 0b0000000000000000000000000000000000000001000000000000000001111111ull;
					case 56u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11C68ull)) & 0b0000000000000000000000001111111111111111111111111111110000000000ull;
					case 57u: return false;
					case 58u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11CE8ull)) & 0b1111111111111111111111111111101101111111000000000000000000000000ull;
					case 59u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11D28ull)) & 0b1011111100000000000000000000000001000000000000000000000111111111ull;
					case 60u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x11D68ull)) & 0b0000000000000001000000000000001111111111111111111111111111111101ull;
					case 61u: return false;
					case 62u: return false;
					case 63u: return false;
					TOML_NO_DEFAULT_CASE;
				}
				TOML_UNREACHABLE;
				// total codepoints in chunk: 1256
			}
			case 18u: return (codepoint >= U'\U00011EE0' && codepoint <= U'\U00011EF2') || (codepoint >= U'\U00012000' && codepoint <= U'\U00012399')
					|| (codepoint >= U'\U00012480' && codepoint <= U'\U00012543');
			case 19u: return codepoint >= U'\U00013000' && codepoint <= U'\U0001342E';
			case 20u: return codepoint >= U'\U00014400' && codepoint <= U'\U00014646';
			case 21u: return false;
			case 22u: 
			{
				TOML_ASSUME(codepoint >= U'\U00015DBE');
				TOML_ASSUME(codepoint <= U'\U00016D9B');
				switch ((static_cast<uint32_t>(codepoint) - 0x15DBEu) / 64u)
				{
					case 0u: return false;
					case 1u: return false;
					case 2u: return false;
					case 3u: return false;
					case 4u: return false;
					case 5u: return false;
					case 6u: return false;
					case 7u: return false;
					case 8u: return false;
					case 9u: return false;
					case 10u: return false;
					case 11u: return false;
					case 12u: return false;
					case 13u: return false;
					case 14u: return false;
					case 15u: return false;
					case 16u: return false;
					case 17u: return false;
					case 18u: return false;
					case 19u: return false;
					case 20u: return false;
					case 21u: return false;
					case 22u: return false;
					case 23u: return false;
					case 24u: return false;
					case 25u: return false;
					case 26u: return false;
					case 27u: return false;
					case 28u: return false;
					case 29u: return false;
					case 30u: return false;
					case 31u: return false;
					case 32u: return false;
					case 33u: return false;
					case 34u: return false;
					case 35u: return false;
					case 36u: return false;
					case 37u: return false;
					case 38u: return false;
					case 39u: return false;
					case 40u: return false;
					case 41u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x167FEull)) & 0b1111111111111111111111111111111111111111111111111111111111111100ull;
					case 42u: return true;
					case 43u: return true;
					case 44u: return true;
					case 45u: return true;
					case 46u: return true;
					case 47u: return true;
					case 48u: return true;
					case 49u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x169FEull)) & 0b0000011111111111111111111111111111111111111111111111111111111111ull;
					case 50u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x16A3Eull)) & 0b0000000000000000000000000000000111111111111111111111111111111100ull;
					case 51u: return false;
					case 52u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x16ABEull)) & 0b0000000000000000111111111111111111111111111111000000000000000000ull;
					case 53u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x16AFEull)) & 0b0000000000000011111111111111111111111111111111111111111111111100ull;
					case 54u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x16B3Eull)) & 0b1000001111111111111111111110000000000000000000000000000000111100ull;
					case 55u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x16B7Eull)) & 0b0000000000000000000000000000000000000000000000111111111111111111ull;
					case 56u: return false;
					case 57u: return false;
					case 58u: return false;
					case 59u: return false;
					case 60u: return false;
					case 61u: return false;
					case 62u: return false;
					case 63u: return false;
					TOML_NO_DEFAULT_CASE;
				}
				TOML_UNREACHABLE;
				// total codepoints in chunk: 722
			}
			case 23u: 
			{
				TOML_ASSUME(codepoint >= U'\U00016D9C');
				TOML_ASSUME(codepoint <= U'\U00017D79');
				switch ((static_cast<uint32_t>(codepoint) - 0x16D9Cu) / 64u)
				{
					case 0u: return false;
					case 1u: return false;
					case 2u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x16E1Cull)) & 0b1111111111111111111111111111000000000000000000000000000000000000ull;
					case 3u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x16E5Cull)) & 0b0000000000000000000000000000111111111111111111111111111111111111ull;
					case 4u: return false;
					case 5u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x16EDCull)) & 0b1111111111111111111111111111000000000000000000000000000000000000ull;
					case 6u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x16F1Cull)) & 0b0000000000010000011111111111111111111111111111111111111111111111ull;
					case 7u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x16F5Cull)) & 0b1111111110000000000000000000000000000000000000000000000000000000ull;
					case 8u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x16F9Cull)) & 0b0000000000000000000000000000000000000000000000000000000000001111ull;
					case 9u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x16FDCull)) & 0b1111111111111111111111111111000000000000000000000000000010110000ull;
					case 10u: return true;
					case 11u: return true;
					case 12u: return true;
					case 13u: return true;
					case 14u: return true;
					case 15u: return true;
					case 16u: return true;
					case 17u: return true;
					case 18u: return true;
					case 19u: return true;
					case 20u: return true;
					case 21u: return true;
					case 22u: return true;
					case 23u: return true;
					case 24u: return true;
					case 25u: return true;
					case 26u: return true;
					case 27u: return true;
					case 28u: return true;
					case 29u: return true;
					case 30u: return true;
					case 31u: return true;
					case 32u: return true;
					case 33u: return true;
					case 34u: return true;
					case 35u: return true;
					case 36u: return true;
					case 37u: return true;
					case 38u: return true;
					case 39u: return true;
					case 40u: return true;
					case 41u: return true;
					case 42u: return true;
					case 43u: return true;
					case 44u: return true;
					case 45u: return true;
					case 46u: return true;
					case 47u: return true;
					case 48u: return true;
					case 49u: return true;
					case 50u: return true;
					case 51u: return true;
					case 52u: return true;
					case 53u: return true;
					case 54u: return true;
					case 55u: return true;
					case 56u: return true;
					case 57u: return true;
					case 58u: return true;
					case 59u: return true;
					case 60u: return true;
					case 61u: return true;
					case 62u: return true;
					case 63u: return true;
					TOML_NO_DEFAULT_CASE;
				}
				TOML_UNREACHABLE;
				// total codepoints in chunk: 3606
			}
			case 24u: return codepoint <= U'\U000187F6' || (codepoint >= U'\U00018800' && codepoint <= U'\U00018AF2');
			case 25u: return false;
			case 26u: return false;
			case 27u: 
			{
				TOML_ASSUME(codepoint >= U'\U0001AD14');
				TOML_ASSUME(codepoint <= U'\U0001BCF1');
				switch ((static_cast<uint32_t>(codepoint) - 0x1AD14u) / 64u)
				{
					case 0u: return false;
					case 1u: return false;
					case 2u: return false;
					case 3u: return false;
					case 4u: return false;
					case 5u: return false;
					case 6u: return false;
					case 7u: return false;
					case 8u: return false;
					case 9u: return false;
					case 10u: return false;
					case 11u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1AFD4ull)) & 0b1111111111111111111100000000000000000000000000000000000000000000ull;
					case 12u: return true;
					case 13u: return true;
					case 14u: return true;
					case 15u: return true;
					case 16u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1B114ull)) & 0b0111000000000000000000000000000000000000000000000000011111111111ull;
					case 17u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1B154ull)) & 0b1111111111111111111111111111111111110000000011110000000000000000ull;
					case 18u: return true;
					case 19u: return true;
					case 20u: return true;
					case 21u: return true;
					case 22u: return true;
					case 23u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1B2D4ull)) & 0b0000000000000000000000001111111111111111111111111111111111111111ull;
					case 24u: return false;
					case 25u: return false;
					case 26u: return false;
					case 27u: return false;
					case 28u: return false;
					case 29u: return false;
					case 30u: return false;
					case 31u: return false;
					case 32u: return false;
					case 33u: return false;
					case 34u: return false;
					case 35u: return false;
					case 36u: return false;
					case 37u: return false;
					case 38u: return false;
					case 39u: return false;
					case 40u: return false;
					case 41u: return false;
					case 42u: return false;
					case 43u: return false;
					case 44u: return false;
					case 45u: return false;
					case 46u: return false;
					case 47u: return false;
					case 48u: return false;
					case 49u: return false;
					case 50u: return false;
					case 51u: return false;
					case 52u: return false;
					case 53u: return false;
					case 54u: return false;
					case 55u: return false;
					case 56u: return false;
					case 57u: return false;
					case 58u: return false;
					case 59u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1BBD4ull)) & 0b1111111111111111111100000000000000000000000000000000000000000000ull;
					case 60u: return true;
					case 61u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1BC54ull)) & 0b1111000000011111111100011111111111110000011111111111111111111111ull;
					case 62u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1BC94ull)) & 0b0000000000000000000000000000000000000000000000000000000000111111ull;
					case 63u: return false;
					TOML_NO_DEFAULT_CASE;
				}
				TOML_UNREACHABLE;
				// total codepoints in chunk: 829
			}
			case 28u: return false;
			case 29u: 
			{
				TOML_ASSUME(codepoint >= U'\U0001CCD0');
				TOML_ASSUME(codepoint <= U'\U0001DCAD');
				switch ((static_cast<uint32_t>(codepoint) - 0x1CCD0u) / 64u)
				{
					case 0u: return false;
					case 1u: return false;
					case 2u: return false;
					case 3u: return false;
					case 4u: return false;
					case 5u: return false;
					case 6u: return false;
					case 7u: return false;
					case 8u: return false;
					case 9u: return false;
					case 10u: return false;
					case 11u: return false;
					case 12u: return false;
					case 13u: return false;
					case 14u: return false;
					case 15u: return false;
					case 16u: return false;
					case 17u: return false;
					case 18u: return false;
					case 19u: return false;
					case 20u: return false;
					case 21u: return false;
					case 22u: return false;
					case 23u: return false;
					case 24u: return false;
					case 25u: return false;
					case 26u: return false;
					case 27u: return false;
					case 28u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1D3D0ull)) & 0b1111111111111111000000000000000000000000000000000000000000000000ull;
					case 29u: return true;
					case 30u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1D450ull)) & 0b1111111111111111111111111111111111111111111111111111111111011111ull;
					case 31u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1D490ull)) & 0b1111111111101111111010111111111111011110011001001101111111111111ull;
					case 32u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1D4D0ull)) & 0b1110011110111111111111111111111111111111111111111111111111111111ull;
					case 33u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1D510ull)) & 0b1111110001011111011110111111111111111111111111111101111111011111ull;
					case 34u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1D550ull)) & 0b1111111111111111111111111111111111111111111111111111111111111101ull;
					case 35u: return true;
					case 36u: return true;
					case 37u: return true;
					case 38u: return true;
					case 39u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1D690ull)) & 0b1111111111111101111111111111111111111111001111111111111111111111ull;
					case 40u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1D6D0ull)) & 0b1111111111111111111101111111111111111111111111111111011111111111ull;
					case 41u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1D710ull)) & 0b0111111111111111111111111101111111111111111111111111111111011111ull;
					case 42u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1D750ull)) & 0b1111110111111111111111111111111101111111111111111111111111111111ull;
					case 43u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1D790ull)) & 0b0000111111110111111111111111111111111101111111111111111111111111ull;
					case 44u: return false;
					case 45u: return false;
					case 46u: return false;
					case 47u: return false;
					case 48u: return false;
					case 49u: return false;
					case 50u: return false;
					case 51u: return false;
					case 52u: return false;
					case 53u: return false;
					case 54u: return false;
					case 55u: return false;
					case 56u: return false;
					case 57u: return false;
					case 58u: return false;
					case 59u: return false;
					case 60u: return false;
					case 61u: return false;
					case 62u: return false;
					case 63u: return false;
					TOML_NO_DEFAULT_CASE;
				}
				TOML_UNREACHABLE;
				// total codepoints in chunk: 936
			}
			case 30u: 
			{
				TOML_ASSUME(codepoint >= U'\U0001DCAE');
				TOML_ASSUME(codepoint <= U'\U0001EC8B');
				switch ((static_cast<uint32_t>(codepoint) - 0x1DCAEu) / 64u)
				{
					case 0u: return false;
					case 1u: return false;
					case 2u: return false;
					case 3u: return false;
					case 4u: return false;
					case 5u: return false;
					case 6u: return false;
					case 7u: return false;
					case 8u: return false;
					case 9u: return false;
					case 10u: return false;
					case 11u: return false;
					case 12u: return false;
					case 13u: return false;
					case 14u: return false;
					case 15u: return false;
					case 16u: return false;
					case 17u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1E0EEull)) & 0b0111111111111111111111111111111111111111111111000000000000000000ull;
					case 18u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1E12Eull)) & 0b0000000000000000000000000000000100000000000000001111111000000000ull;
					case 19u: return false;
					case 20u: return false;
					case 21u: return false;
					case 22u: return false;
					case 23u: return false;
					case 24u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1E2AEull)) & 0b0011111111111111111111111111111111111111111111000000000000000000ull;
					case 25u: return false;
					case 26u: return false;
					case 27u: return false;
					case 28u: return false;
					case 29u: return false;
					case 30u: return false;
					case 31u: return false;
					case 32u: return false;
					case 33u: return false;
					case 34u: return false;
					case 35u: return false;
					case 36u: return false;
					case 37u: return false;
					case 38u: return false;
					case 39u: return false;
					case 40u: return false;
					case 41u: return false;
					case 42u: return false;
					case 43u: return false;
					case 44u: return false;
					case 45u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1E7EEull)) & 0b1111111111111111111111111111111111111111111111000000000000000000ull;
					case 46u: return true;
					case 47u: return true;
					case 48u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1E8AEull)) & 0b0000000000000000000000000000000000000000011111111111111111111111ull;
					case 49u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1E8EEull)) & 0b1111111111111111111111111111111111111111111111000000000000000000ull;
					case 50u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1E92Eull)) & 0b0000000000000000000000000000000000100000001111111111111111111111ull;
					case 51u: return false;
					case 52u: return false;
					case 53u: return false;
					case 54u: return false;
					case 55u: return false;
					case 56u: return false;
					case 57u: return false;
					case 58u: return false;
					case 59u: return false;
					case 60u: return false;
					case 61u: return false;
					case 62u: return false;
					case 63u: return false;
					TOML_NO_DEFAULT_CASE;
				}
				TOML_UNREACHABLE;
				// total codepoints in chunk: 363
			}
			case 31u: 
			{
				TOML_ASSUME(codepoint >= U'\U0001EC8C');
				TOML_ASSUME(codepoint <= U'\U0001FC69');
				switch ((static_cast<uint32_t>(codepoint) - 0x1EC8Cu) / 64u)
				{
					case 0u: return false;
					case 1u: return false;
					case 2u: return false;
					case 3u: return false;
					case 4u: return false;
					case 5u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1EDCCull)) & 0b1111111011110000000000000000000000000000000000000000000000000000ull;
					case 6u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1EE0Cull)) & 0b1010100001000000101011110111111111101001011011111111111111111111ull;
					case 7u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1EE4Cull)) & 0b1011111111110101111011110111111101111001011010101010100101101110ull;
					case 8u: return (1ull << (static_cast<uint64_t>(codepoint) - 0x1EE8Cull)) & 0b0000000000000000111111111111111110111110111000001111111111111111ull;
					case 9u: return false;
					case 10u: return false;
					case 11u: return false;
					case 12u: return false;
					case 13u: return false;
					case 14u: return false;
					case 15u: return false;
					case 16u: return false;
					case 17u: return false;
					case 18u: return false;
					case 19u: return false;
					case 20u: return false;
					case 21u: return false;
					case 22u: return false;
					case 23u: return false;
					case 24u: return false;
					case 25u: return false;
					case 26u: return false;
					case 27u: return false;
					case 28u: return false;
					case 29u: return false;
					case 30u: return false;
					case 31u: return false;
					case 32u: return false;
					case 33u: return false;
					case 34u: return false;
					case 35u: return false;
					case 36u: return false;
					case 37u: return false;
					case 38u: return false;
					case 39u: return false;
					case 40u: return false;
					case 41u: return false;
					case 42u: return false;
					case 43u: return false;
					case 44u: return false;
					case 45u: return false;
					case 46u: return false;
					case 47u: return false;
					case 48u: return false;
					case 49u: return false;
					case 50u: return false;
					case 51u: return false;
					case 52u: return false;
					case 53u: return false;
					case 54u: return false;
					case 55u: return false;
					case 56u: return false;
					case 57u: return false;
					case 58u: return false;
					case 59u: return false;
					case 60u: return false;
					case 61u: return false;
					case 62u: return false;
					case 63u: return false;
					TOML_NO_DEFAULT_CASE;
				}
				TOML_UNREACHABLE;
				// total codepoints in chunk: 141
			}
			case 32u: return codepoint >= U'\U00020000';
			case 33u: return true;
			case 34u: return true;
			case 35u: return true;
			case 36u: return true;
			case 37u: return true;
			case 38u: return true;
			case 39u: return true;
			case 40u: return true;
			case 41u: return true;
			case 42u: return codepoint <= U'\U0002A6D5' || codepoint >= U'\U0002A700';
			case 43u: return codepoint <= U'\U0002B733' || (codepoint >= U'\U0002B740' && codepoint <= U'\U0002B81C') || codepoint >= U'\U0002B820';
			case 44u: return true;
			case 45u: return codepoint <= U'\U0002CEA0' || codepoint >= U'\U0002CEB0';
			case 46u: return true;
			case 47u: return codepoint <= U'\U0002EBDF' || codepoint >= U'\U0002F800';
			TOML_NO_DEFAULT_CASE;
		}
		TOML_UNREACHABLE;
		// total codepoints in chunk: 125582

	}
}
