#pragma once
#include "toml_common.h"

namespace TOML_NAMESPACE
{
	namespace impl
	{
		[[nodiscard]]
		constexpr bool is_whitespace(char32_t codepoint) noexcept
		{
			//see: https://en.wikipedia.org/wiki/Whitespace_character#Unicode
			//(characters that don't say "is a line-break")

			return codepoint == U'\t'
				|| codepoint == U' '
				|| codepoint == U'\u00A0' // no-break space
				|| codepoint == U'\u1680' // ogham space mark
				|| (codepoint >= U'\u2000' && codepoint <= U'\u200A') // em quad -> hair space
				|| codepoint == U'\u202F' // narrow no-break space
				|| codepoint == U'\u205F' // medium mathematical space
				|| codepoint == U'\u3000' // ideographic space
			;
		}

		[[nodiscard]]
		constexpr bool is_line_break(char32_t codepoint) noexcept
		{
			//see https://en.wikipedia.org/wiki/Whitespace_character#Unicode
			//(characters that say "is a line-break")

			return (codepoint >= U'\n' && codepoint <= U'\r')
				|| codepoint == U'\u0085' // next line
				|| codepoint == U'\u2028' // line separator
				|| codepoint == U'\u2029' // paragraph separator
			;
		}

		[[nodiscard]] TOML_ALWAYS_INLINE
		constexpr bool is_string_delimiter(char32_t codepoint) noexcept
		{
			return codepoint == U'"'
				|| codepoint == U'\'';
		}

		[[nodiscard]] TOML_ALWAYS_INLINE
		constexpr bool is_ascii_letter(char32_t codepoint) noexcept
		{
			return (codepoint >= U'a' && codepoint <= U'z')
				|| (codepoint >= U'A' && codepoint <= U'Z');
		}

		#if TOML_STRICT

		[[nodiscard]] TOML_ALWAYS_INLINE
		constexpr bool is_letter(char32_t codepoint) noexcept
		{
			return is_ascii_letter(codepoint);
		}

		#else

		[[nodiscard]]
		constexpr bool is_letter(char32_t codepoint) noexcept
		{
			if (is_ascii_letter(codepoint))
				return true;

			// this code was generated by a script;
			// see /vs/generate_is_letter_ranges.py

			if (codepoint < U'\u00AA' || codepoint > U'\U0002FA1D')
				return false;

			switch ((static_cast<uint32_t>(codepoint) - 0xAAu) / 30u)
			{
				case 0: 
				{
					switch ((static_cast<uint32_t>(codepoint) - 0xAAu) / 42u)
					{
						case 0: return codepoint == U'\u00AA'
								|| codepoint == U'\u00B5'
								|| codepoint == U'\u00BA'
								|| (codepoint >= U'\u00C0' && codepoint <= U'\u00D6')
								|| (codepoint >= U'\u00D8' && codepoint <= U'\u00F6')
								|| (codepoint >= U'\u00F8' && codepoint <= U'\u0144');
								// total codepoints in chunk: 134

						case 1: return true;
						case 2: return true;
						case 3: return (codepoint >= U'\u027B' && codepoint <= U'\u02C1')
								|| (codepoint >= U'\u02C6' && codepoint <= U'\u02D1')
								|| (codepoint >= U'\u02E0' && codepoint <= U'\u02E4')
								|| codepoint == U'\u02EC'
								|| codepoint == U'\u02EE';
								// total codepoints in chunk: 90

						case 4: return (codepoint >= U'\u0370' && codepoint <= U'\u0374')
								|| (codepoint >= U'\u0376' && codepoint <= U'\u0377')
								|| (codepoint >= U'\u037A' && codepoint <= U'\u037D')
								|| codepoint == U'\u037F'
								|| codepoint == U'\u0386'
								|| (codepoint >= U'\u0388' && codepoint <= U'\u038A')
								|| codepoint == U'\u038C'
								|| (codepoint >= U'\u038E' && codepoint <= U'\u03A1')
								|| (codepoint >= U'\u03A3' && codepoint <= U'\u03B0');
								// total codepoints in chunk: 51

						case 5: return (codepoint >= U'\u03B1' && codepoint <= U'\u03F5')
								|| (codepoint >= U'\u03F7' && codepoint <= U'\u044B');
								// total codepoints in chunk: 154

						case 6: return (codepoint >= U'\u044C' && codepoint <= U'\u0481')
								|| (codepoint >= U'\u048A' && codepoint <= U'\u04E6');
								// total codepoints in chunk: 147

						case 7: return (codepoint >= U'\u04E7' && codepoint <= U'\u052F')
								|| (codepoint >= U'\u0531' && codepoint <= U'\u0556')
								|| codepoint == U'\u0559'
								|| (codepoint >= U'\u0560' && codepoint <= U'\u0581');
								// total codepoints in chunk: 146

						case 8: return (codepoint >= U'\u0582' && codepoint <= U'\u0588')
								|| (codepoint >= U'\u05D0' && codepoint <= U'\u05EA')
								|| (codepoint >= U'\u05EF' && codepoint <= U'\u05F2');
								// total codepoints in chunk: 38

						case 9: return (codepoint >= U'\u0620' && codepoint <= U'\u064A')
								|| (codepoint >= U'\u066E' && codepoint <= U'\u066F')
								|| (codepoint >= U'\u0671' && codepoint <= U'\u06B7');
								// total codepoints in chunk: 116

						case 10: return (codepoint >= U'\u06B8' && codepoint <= U'\u06D3')
								|| codepoint == U'\u06D5'
								|| (codepoint >= U'\u06E5' && codepoint <= U'\u06E6')
								|| (codepoint >= U'\u06EE' && codepoint <= U'\u06EF')
								|| (codepoint >= U'\u06FA' && codepoint <= U'\u06FC')
								|| codepoint == U'\u06FF'
								|| codepoint == U'\u0710'
								|| (codepoint >= U'\u0712' && codepoint <= U'\u072F')
								|| (codepoint >= U'\u074D' && codepoint <= U'\u0752');
								// total codepoints in chunk: 74

						case 11: return (codepoint >= U'\u0753' && codepoint <= U'\u07A5')
								|| codepoint == U'\u07B1'
								|| (codepoint >= U'\u07CA' && codepoint <= U'\u07EA');
								// total codepoints in chunk: 117

						case 12: return (codepoint >= U'\u07F4' && codepoint <= U'\u07F5')
								|| codepoint == U'\u07FA'
								|| (codepoint >= U'\u0800' && codepoint <= U'\u0815')
								|| codepoint == U'\u081A'
								|| codepoint == U'\u0824'
								|| codepoint == U'\u0828'
								|| (codepoint >= U'\u0840' && codepoint <= U'\u0858')
								|| (codepoint >= U'\u0860' && codepoint <= U'\u086A');
								// total codepoints in chunk: 64

						case 13: return (codepoint >= U'\u08A0' && codepoint <= U'\u08B4')
								|| (codepoint >= U'\u08B6' && codepoint <= U'\u08BD')
								|| (codepoint >= U'\u0904' && codepoint <= U'\u0923');
								// total codepoints in chunk: 61

						case 14: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0x924u) / 2u)
							{
								case 0: return (codepoint >= U'\u0924' && codepoint <= U'\u0939')
										|| codepoint == U'\u093D'
										|| codepoint == U'\u0950'
										|| (codepoint >= U'\u0958' && codepoint <= U'\u0961')
										|| codepoint == U'\u0971';
										// total codepoints in chunk: 35

								case 1: return (codepoint >= U'\u0972' && codepoint <= U'\u0980')
										|| (codepoint >= U'\u0985' && codepoint <= U'\u098C')
										|| (codepoint >= U'\u098F' && codepoint <= U'\u0990')
										|| (codepoint >= U'\u0993' && codepoint <= U'\u09A8')
										|| (codepoint >= U'\u09AA' && codepoint <= U'\u09B0')
										|| codepoint == U'\u09B2'
										|| (codepoint >= U'\u09B6' && codepoint <= U'\u09B9')
										|| codepoint == U'\u09BD';
										// total codepoints in chunk: 60

							}
							// total codepoints in chunk: 95

						}
						case 15: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0x9BFu) / 2u)
							{
								case 0: return codepoint == U'\u09CE'
										|| (codepoint >= U'\u09DC' && codepoint <= U'\u09DD')
										|| (codepoint >= U'\u09DF' && codepoint <= U'\u09E1')
										|| (codepoint >= U'\u09F0' && codepoint <= U'\u09F1')
										|| codepoint == U'\u09FC'
										|| (codepoint >= U'\u0A05' && codepoint <= U'\u0A0A');
										// total codepoints in chunk: 15

								case 1: return (codepoint >= U'\u0A0F' && codepoint <= U'\u0A10')
										|| (codepoint >= U'\u0A13' && codepoint <= U'\u0A28')
										|| (codepoint >= U'\u0A2A' && codepoint <= U'\u0A30')
										|| (codepoint >= U'\u0A32' && codepoint <= U'\u0A33')
										|| (codepoint >= U'\u0A35' && codepoint <= U'\u0A36')
										|| (codepoint >= U'\u0A38' && codepoint <= U'\u0A39')
										|| codepoint == U'\u0A59';
										// total codepoints in chunk: 38

							}
							// total codepoints in chunk: 53

						}
						case 16: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0xA5Au) / 2u)
							{
								case 0: return (codepoint >= U'\u0A5A' && codepoint <= U'\u0A5C')
										|| codepoint == U'\u0A5E'
										|| (codepoint >= U'\u0A72' && codepoint <= U'\u0A74')
										|| (codepoint >= U'\u0A85' && codepoint <= U'\u0A8D')
										|| (codepoint >= U'\u0A8F' && codepoint <= U'\u0A91')
										|| (codepoint >= U'\u0A93' && codepoint <= U'\u0AA7');
										// total codepoints in chunk: 40

								case 1: return codepoint == U'\u0AA8'
										|| (codepoint >= U'\u0AAA' && codepoint <= U'\u0AB0')
										|| (codepoint >= U'\u0AB2' && codepoint <= U'\u0AB3')
										|| (codepoint >= U'\u0AB5' && codepoint <= U'\u0AB9')
										|| codepoint == U'\u0ABD'
										|| codepoint == U'\u0AD0'
										|| (codepoint >= U'\u0AE0' && codepoint <= U'\u0AE1');
										// total codepoints in chunk: 19

							}
							// total codepoints in chunk: 59

						}
						case 17: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0xAF5u) / 2u)
							{
								case 0: return codepoint == U'\u0AF9'
										|| (codepoint >= U'\u0B05' && codepoint <= U'\u0B0C')
										|| (codepoint >= U'\u0B0F' && codepoint <= U'\u0B10')
										|| (codepoint >= U'\u0B13' && codepoint <= U'\u0B28')
										|| (codepoint >= U'\u0B2A' && codepoint <= U'\u0B30')
										|| (codepoint >= U'\u0B32' && codepoint <= U'\u0B33')
										|| (codepoint >= U'\u0B35' && codepoint <= U'\u0B39')
										|| codepoint == U'\u0B3D';
										// total codepoints in chunk: 48

								case 1: return (codepoint >= U'\u0B5C' && codepoint <= U'\u0B5D')
										|| (codepoint >= U'\u0B5F' && codepoint <= U'\u0B61')
										|| codepoint == U'\u0B71'
										|| codepoint == U'\u0B83'
										|| (codepoint >= U'\u0B85' && codepoint <= U'\u0B8A')
										|| (codepoint >= U'\u0B8E' && codepoint <= U'\u0B8F');
										// total codepoints in chunk: 15

							}
							// total codepoints in chunk: 63

						}
						case 18: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0xB90u) / 2u)
							{
								case 0: return codepoint == U'\u0B90'
										|| (codepoint >= U'\u0B92' && codepoint <= U'\u0B95')
										|| (codepoint >= U'\u0B99' && codepoint <= U'\u0B9A')
										|| codepoint == U'\u0B9C'
										|| (codepoint >= U'\u0B9E' && codepoint <= U'\u0B9F')
										|| (codepoint >= U'\u0BA3' && codepoint <= U'\u0BA4')
										|| (codepoint >= U'\u0BA8' && codepoint <= U'\u0BAA')
										|| (codepoint >= U'\u0BAE' && codepoint <= U'\u0BB9')
										|| codepoint == U'\u0BD0';
										// total codepoints in chunk: 28

								case 1: return (codepoint >= U'\u0C05' && codepoint <= U'\u0C0C')
										|| (codepoint >= U'\u0C0E' && codepoint <= U'\u0C10')
										|| (codepoint >= U'\u0C12' && codepoint <= U'\u0C28')
										|| codepoint == U'\u0C2A';
										// total codepoints in chunk: 35

							}
							// total codepoints in chunk: 63

						}
						case 19: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0xC2Bu) / 2u)
							{
								case 0: return (codepoint >= U'\u0C2B' && codepoint <= U'\u0C39')
										|| codepoint == U'\u0C3D'
										|| (codepoint >= U'\u0C58' && codepoint <= U'\u0C5A')
										|| (codepoint >= U'\u0C60' && codepoint <= U'\u0C61');
										// total codepoints in chunk: 21

								case 1: return codepoint == U'\u0C80'
										|| (codepoint >= U'\u0C85' && codepoint <= U'\u0C8C')
										|| (codepoint >= U'\u0C8E' && codepoint <= U'\u0C90')
										|| (codepoint >= U'\u0C92' && codepoint <= U'\u0CA8')
										|| (codepoint >= U'\u0CAA' && codepoint <= U'\u0CB3')
										|| (codepoint >= U'\u0CB5' && codepoint <= U'\u0CB9')
										|| codepoint == U'\u0CBD';
										// total codepoints in chunk: 51

							}
							// total codepoints in chunk: 72

						}
						case 20: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0xCC6u) / 2u)
							{
								case 0: return codepoint == U'\u0CDE'
										|| (codepoint >= U'\u0CE0' && codepoint <= U'\u0CE1')
										|| (codepoint >= U'\u0CF1' && codepoint <= U'\u0CF2')
										|| (codepoint >= U'\u0D05' && codepoint <= U'\u0D0C')
										|| (codepoint >= U'\u0D0E' && codepoint <= U'\u0D10')
										|| (codepoint >= U'\u0D12' && codepoint <= U'\u0D13');
										// total codepoints in chunk: 18

								case 1: return (codepoint >= U'\u0D14' && codepoint <= U'\u0D3A')
										|| codepoint == U'\u0D3D'
										|| codepoint == U'\u0D4E'
										|| (codepoint >= U'\u0D54' && codepoint <= U'\u0D56')
										|| (codepoint >= U'\u0D5F' && codepoint <= U'\u0D60');
										// total codepoints in chunk: 46

							}
							// total codepoints in chunk: 64

						}
						case 21: return codepoint == U'\u0D61'
								|| (codepoint >= U'\u0D7A' && codepoint <= U'\u0D7F')
								|| (codepoint >= U'\u0D85' && codepoint <= U'\u0D96')
								|| (codepoint >= U'\u0D9A' && codepoint <= U'\u0DB1')
								|| (codepoint >= U'\u0DB3' && codepoint <= U'\u0DBB')
								|| codepoint == U'\u0DBD'
								|| (codepoint >= U'\u0DC0' && codepoint <= U'\u0DC6');
								// total codepoints in chunk: 66

						case 22: return (codepoint >= U'\u0E01' && codepoint <= U'\u0E30')
								|| (codepoint >= U'\u0E32' && codepoint <= U'\u0E33')
								|| (codepoint >= U'\u0E40' && codepoint <= U'\u0E46')
								|| (codepoint >= U'\u0E81' && codepoint <= U'\u0E82')
								|| codepoint == U'\u0E84'
								|| (codepoint >= U'\u0E86' && codepoint <= U'\u0E8A')
								|| (codepoint >= U'\u0E8C' && codepoint <= U'\u0E96');
								// total codepoints in chunk: 76

						case 23: return (codepoint >= U'\u0E97' && codepoint <= U'\u0EA3')
								|| codepoint == U'\u0EA5'
								|| (codepoint >= U'\u0EA7' && codepoint <= U'\u0EB0')
								|| (codepoint >= U'\u0EB2' && codepoint <= U'\u0EB3')
								|| codepoint == U'\u0EBD'
								|| (codepoint >= U'\u0EC0' && codepoint <= U'\u0EC4')
								|| codepoint == U'\u0EC6'
								|| (codepoint >= U'\u0EDC' && codepoint <= U'\u0EDF')
								|| codepoint == U'\u0F00';
								// total codepoints in chunk: 38

						case 24: return (codepoint >= U'\u0F40' && codepoint <= U'\u0F47')
								|| (codepoint >= U'\u0F49' && codepoint <= U'\u0F6C')
								|| (codepoint >= U'\u0F88' && codepoint <= U'\u0F8C');
								// total codepoints in chunk: 49

						case 25: return (codepoint >= U'\u1000' && codepoint <= U'\u102A')
								|| codepoint == U'\u103F'
								|| (codepoint >= U'\u1050' && codepoint <= U'\u1055')
								|| (codepoint >= U'\u105A' && codepoint <= U'\u105D')
								|| codepoint == U'\u1061'
								|| (codepoint >= U'\u1065' && codepoint <= U'\u1066');
								// total codepoints in chunk: 57

						case 26: return (codepoint >= U'\u106E' && codepoint <= U'\u1070')
								|| (codepoint >= U'\u1075' && codepoint <= U'\u1081')
								|| codepoint == U'\u108E'
								|| (codepoint >= U'\u10A0' && codepoint <= U'\u10C5')
								|| codepoint == U'\u10C7'
								|| codepoint == U'\u10CD'
								|| (codepoint >= U'\u10D0' && codepoint <= U'\u10FA')
								|| (codepoint >= U'\u10FC' && codepoint <= U'\u1102');
								// total codepoints in chunk: 107

						case 27: return true;
						case 28: return true;
						case 29: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0x1239u) / 2u)
							{
								case 0: return (codepoint >= U'\u1239' && codepoint <= U'\u1248')
										|| (codepoint >= U'\u124A' && codepoint <= U'\u124D')
										|| (codepoint >= U'\u1250' && codepoint <= U'\u1256')
										|| codepoint == U'\u1258'
										|| (codepoint >= U'\u125A' && codepoint <= U'\u125D')
										|| (codepoint >= U'\u1260' && codepoint <= U'\u1286');
										// total codepoints in chunk: 71

								case 1: return (codepoint >= U'\u1287' && codepoint <= U'\u1288')
										|| (codepoint >= U'\u128A' && codepoint <= U'\u128D')
										|| (codepoint >= U'\u1290' && codepoint <= U'\u12B0')
										|| (codepoint >= U'\u12B2' && codepoint <= U'\u12B5')
										|| (codepoint >= U'\u12B8' && codepoint <= U'\u12BE')
										|| codepoint == U'\u12C0'
										|| (codepoint >= U'\u12C2' && codepoint <= U'\u12C5')
										|| (codepoint >= U'\u12C8' && codepoint <= U'\u12D3');
										// total codepoints in chunk: 67

							}
							// total codepoints in chunk: 138

						}
						case 30: return (codepoint >= U'\u12D4' && codepoint <= U'\u12D6')
								|| (codepoint >= U'\u12D8' && codepoint <= U'\u1310')
								|| (codepoint >= U'\u1312' && codepoint <= U'\u1315')
								|| (codepoint >= U'\u1318' && codepoint <= U'\u135A');
								// total codepoints in chunk: 131

						case 31: return (codepoint >= U'\u1380' && codepoint <= U'\u138F')
								|| (codepoint >= U'\u13A0' && codepoint <= U'\u13F5')
								|| (codepoint >= U'\u13F8' && codepoint <= U'\u13FD')
								|| (codepoint >= U'\u1401' && codepoint <= U'\u1409');
								// total codepoints in chunk: 117

						case 32: return true;
						case 33: return true;
						case 34: return true;
						case 35: return (codepoint >= U'\u15DB' && codepoint <= U'\u166C')
								|| (codepoint >= U'\u166F' && codepoint <= U'\u1675');
								// total codepoints in chunk: 153

						case 36: return (codepoint >= U'\u1676' && codepoint <= U'\u167F')
								|| (codepoint >= U'\u1681' && codepoint <= U'\u169A')
								|| (codepoint >= U'\u16A0' && codepoint <= U'\u16EA')
								|| (codepoint >= U'\u16F1' && codepoint <= U'\u16F8')
								|| (codepoint >= U'\u1700' && codepoint <= U'\u170C')
								|| (codepoint >= U'\u170E' && codepoint <= U'\u1710');
								// total codepoints in chunk: 135

						case 37: return codepoint == U'\u1711'
								|| (codepoint >= U'\u1720' && codepoint <= U'\u1731')
								|| (codepoint >= U'\u1740' && codepoint <= U'\u1751')
								|| (codepoint >= U'\u1760' && codepoint <= U'\u176C')
								|| (codepoint >= U'\u176E' && codepoint <= U'\u1770')
								|| (codepoint >= U'\u1780' && codepoint <= U'\u17AB');
								// total codepoints in chunk: 97

						case 38: return (codepoint >= U'\u17AC' && codepoint <= U'\u17B3')
								|| codepoint == U'\u17D7'
								|| codepoint == U'\u17DC'
								|| (codepoint >= U'\u1820' && codepoint <= U'\u1846');
								// total codepoints in chunk: 49

						case 39: return (codepoint >= U'\u1847' && codepoint <= U'\u1878')
								|| (codepoint >= U'\u1880' && codepoint <= U'\u1884')
								|| (codepoint >= U'\u1887' && codepoint <= U'\u18A8')
								|| codepoint == U'\u18AA'
								|| (codepoint >= U'\u18B0' && codepoint <= U'\u18E1');
								// total codepoints in chunk: 140

						case 40: return (codepoint >= U'\u18E2' && codepoint <= U'\u18F5')
								|| (codepoint >= U'\u1900' && codepoint <= U'\u191E')
								|| (codepoint >= U'\u1950' && codepoint <= U'\u196D')
								|| (codepoint >= U'\u1970' && codepoint <= U'\u1974');
								// total codepoints in chunk: 86

						case 41: return (codepoint >= U'\u1980' && codepoint <= U'\u19AB')
								|| (codepoint >= U'\u19B0' && codepoint <= U'\u19C9')
								|| (codepoint >= U'\u1A00' && codepoint <= U'\u1A0B');
								// total codepoints in chunk: 82

					}
					// total codepoints in chunk: 4267

				}
				case 1: 
				{
					switch ((static_cast<uint32_t>(codepoint) - 0x1A0Cu) / 17u)
					{
						case 0: return (codepoint >= U'\u1A0C' && codepoint <= U'\u1A16')
								|| (codepoint >= U'\u1A20' && codepoint <= U'\u1A54')
								|| codepoint == U'\u1AA7'
								|| (codepoint >= U'\u1B05' && codepoint <= U'\u1B33')
								|| (codepoint >= U'\u1B45' && codepoint <= U'\u1B4B')
								|| (codepoint >= U'\u1B83' && codepoint <= U'\u1B8A');
								// total codepoints in chunk: 127

						case 1: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0x1B8Bu) / 2u)
							{
								case 0: return (codepoint >= U'\u1B8B' && codepoint <= U'\u1BA0')
										|| (codepoint >= U'\u1BAE' && codepoint <= U'\u1BAF')
										|| (codepoint >= U'\u1BBA' && codepoint <= U'\u1BE5')
										|| (codepoint >= U'\u1C00' && codepoint <= U'\u1C23');
										// total codepoints in chunk: 104

								case 1: 
								{
									switch ((static_cast<uint32_t>(codepoint) - 0x1C4Bu) / 2u)
									{
										case 0: return (codepoint >= U'\u1C4D' && codepoint <= U'\u1C4F')
												|| (codepoint >= U'\u1C5A' && codepoint <= U'\u1C7D')
												|| (codepoint >= U'\u1C80' && codepoint <= U'\u1C88')
												|| (codepoint >= U'\u1C90' && codepoint <= U'\u1CAA');
												// total codepoints in chunk: 75

										case 1: return (codepoint >= U'\u1CAB' && codepoint <= U'\u1CBA')
												|| (codepoint >= U'\u1CBD' && codepoint <= U'\u1CBF')
												|| (codepoint >= U'\u1CE9' && codepoint <= U'\u1CEC')
												|| (codepoint >= U'\u1CEE' && codepoint <= U'\u1CF3')
												|| (codepoint >= U'\u1CF5' && codepoint <= U'\u1CF6')
												|| codepoint == U'\u1CFA'
												|| (codepoint >= U'\u1D00' && codepoint <= U'\u1D09');
												// total codepoints in chunk: 42

									}
									// total codepoints in chunk: 117

								}
							}
							// total codepoints in chunk: 221

						}
						case 2: return (codepoint >= U'\u1D0A' && codepoint <= U'\u1DBF')
								|| (codepoint >= U'\u1E00' && codepoint <= U'\u1E88');
								// total codepoints in chunk: 319

						case 3: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0x1E89u) / 3u)
							{
								case 0: return true;
								case 1: 
								{
									switch ((static_cast<uint32_t>(codepoint) - 0x1F09u) / 2u)
									{
										case 0: return (codepoint >= U'\u1F09' && codepoint <= U'\u1F15')
												|| (codepoint >= U'\u1F18' && codepoint <= U'\u1F1D')
												|| (codepoint >= U'\u1F20' && codepoint <= U'\u1F45')
												|| codepoint == U'\u1F48';
												// total codepoints in chunk: 58

										case 1: return (codepoint >= U'\u1F49' && codepoint <= U'\u1F4D')
												|| (codepoint >= U'\u1F50' && codepoint <= U'\u1F57')
												|| codepoint == U'\u1F59'
												|| codepoint == U'\u1F5B'
												|| codepoint == U'\u1F5D'
												|| (codepoint >= U'\u1F5F' && codepoint <= U'\u1F7D')
												|| (codepoint >= U'\u1F80' && codepoint <= U'\u1F88');
												// total codepoints in chunk: 56

									}
									// total codepoints in chunk: 114

								}
								case 2: 
								{
									switch ((static_cast<uint32_t>(codepoint) - 0x1F89u) / 2u)
									{
										case 0: return (codepoint >= U'\u1F89' && codepoint <= U'\u1FB4')
												|| (codepoint >= U'\u1FB6' && codepoint <= U'\u1FBC')
												|| codepoint == U'\u1FBE'
												|| (codepoint >= U'\u1FC2' && codepoint <= U'\u1FC4')
												|| (codepoint >= U'\u1FC6' && codepoint <= U'\u1FC8');
												// total codepoints in chunk: 58

										case 1: return (codepoint >= U'\u1FC9' && codepoint <= U'\u1FCC')
												|| (codepoint >= U'\u1FD0' && codepoint <= U'\u1FD3')
												|| (codepoint >= U'\u1FD6' && codepoint <= U'\u1FDB')
												|| (codepoint >= U'\u1FE0' && codepoint <= U'\u1FEC')
												|| (codepoint >= U'\u1FF2' && codepoint <= U'\u1FF4')
												|| (codepoint >= U'\u1FF6' && codepoint <= U'\u1FFC');
												// total codepoints in chunk: 37

									}
									// total codepoints in chunk: 95

								}
							}
							// total codepoints in chunk: 337

						}
						case 4: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0x2008u) / 3u)
							{
								case 0: return codepoint == U'\u2071'
										|| codepoint == U'\u207F';
										// total codepoints in chunk: 2

								case 1: return (codepoint >= U'\u2090' && codepoint <= U'\u209C')
										|| codepoint == U'\u2102'
										|| codepoint == U'\u2107';
										// total codepoints in chunk: 15

								case 2: 
								{
									switch ((static_cast<uint32_t>(codepoint) - 0x2108u) / 2u)
									{
										case 0: 
										{
											switch ((static_cast<uint32_t>(codepoint) - 0x2108u) / 2u)
											{
												case 0: return (codepoint >= U'\u210A' && codepoint <= U'\u2113')
														|| codepoint == U'\u2115'
														|| (codepoint >= U'\u2119' && codepoint <= U'\u211D')
														|| codepoint == U'\u2124'
														|| codepoint == U'\u2126';
														// total codepoints in chunk: 18

												case 1: return codepoint == U'\u2128'
														|| (codepoint >= U'\u212A' && codepoint <= U'\u212D')
														|| (codepoint >= U'\u212F' && codepoint <= U'\u2139')
														|| (codepoint >= U'\u213C' && codepoint <= U'\u213F')
														|| (codepoint >= U'\u2145' && codepoint <= U'\u2147');
														// total codepoints in chunk: 23

											}
											// total codepoints in chunk: 41

										}
										case 1: return (codepoint >= U'\u2148' && codepoint <= U'\u2149')
												|| codepoint == U'\u214E'
												|| (codepoint >= U'\u2183' && codepoint <= U'\u2184');
												// total codepoints in chunk: 5

									}
									// total codepoints in chunk: 46

								}
							}
							// total codepoints in chunk: 63

						}
						case 12: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0x2C00u) / 2u)
							{
								case 0: return (codepoint >= U'\u2C00' && codepoint <= U'\u2C2E')
										|| (codepoint >= U'\u2C30' && codepoint <= U'\u2C5E')
										|| (codepoint >= U'\u2C60' && codepoint <= U'\u2CBF');
										// total codepoints in chunk: 190

								case 1: return (codepoint >= U'\u2CC0' && codepoint <= U'\u2CE4')
										|| (codepoint >= U'\u2CEB' && codepoint <= U'\u2CEE')
										|| (codepoint >= U'\u2CF2' && codepoint <= U'\u2CF3')
										|| (codepoint >= U'\u2D00' && codepoint <= U'\u2D25')
										|| codepoint == U'\u2D27'
										|| codepoint == U'\u2D2D'
										|| (codepoint >= U'\u2D30' && codepoint <= U'\u2D67')
										|| codepoint == U'\u2D6F';
										// total codepoints in chunk: 140

							}
							// total codepoints in chunk: 330

						}
						case 13: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0x2D7Fu) / 2u)
							{
								case 0: 
								{
									switch ((static_cast<uint32_t>(codepoint) - 0x2D7Fu) / 2u)
									{
										case 0: return (codepoint >= U'\u2D80' && codepoint <= U'\u2D96')
												|| (codepoint >= U'\u2DA0' && codepoint <= U'\u2DA6')
												|| (codepoint >= U'\u2DA8' && codepoint <= U'\u2DAE')
												|| (codepoint >= U'\u2DB0' && codepoint <= U'\u2DB6')
												|| (codepoint >= U'\u2DB8' && codepoint <= U'\u2DBE')
												|| (codepoint >= U'\u2DC0' && codepoint <= U'\u2DC6')
												|| (codepoint >= U'\u2DC8' && codepoint <= U'\u2DCE')
												|| (codepoint >= U'\u2DD0' && codepoint <= U'\u2DD6')
												|| (codepoint >= U'\u2DD8' && codepoint <= U'\u2DDE');
												// total codepoints in chunk: 79

										case 1: return codepoint == U'\u2E2F';
												// total codepoints in chunk: 1

									}
									// total codepoints in chunk: 80

								}
							}
							// total codepoints in chunk: 80

						}
						case 14: return (codepoint >= U'\u3005' && codepoint <= U'\u3006')
								|| (codepoint >= U'\u3031' && codepoint <= U'\u3035')
								|| (codepoint >= U'\u303B' && codepoint <= U'\u303C')
								|| (codepoint >= U'\u3041' && codepoint <= U'\u307C');
								// total codepoints in chunk: 69

						case 15: return (codepoint >= U'\u307D' && codepoint <= U'\u3096')
								|| (codepoint >= U'\u309D' && codepoint <= U'\u309F')
								|| (codepoint >= U'\u30A1' && codepoint <= U'\u30FA')
								|| (codepoint >= U'\u30FC' && codepoint <= U'\u30FF')
								|| (codepoint >= U'\u3105' && codepoint <= U'\u312F')
								|| (codepoint >= U'\u3131' && codepoint <= U'\u318E')
								|| (codepoint >= U'\u31A0' && codepoint <= U'\u31BA')
								|| (codepoint >= U'\u31F0' && codepoint <= U'\u31FB');
								// total codepoints in chunk: 299

						case 16: return (codepoint >= U'\u31FC' && codepoint <= U'\u31FF');
								// total codepoints in chunk: 4

					}
					// total codepoints in chunk: 1849

				}
				case 2: return (codepoint >= U'\u3400' && codepoint <= U'\u4CCF');
						// total codepoints in chunk: 6352

				case 3: return (codepoint >= U'\u4CD0' && codepoint <= U'\u4DB4')
						|| (codepoint >= U'\u4E00' && codepoint <= U'\u6631');
						// total codepoints in chunk: 6423

				case 4: return true;
				case 5: return true;
				case 6: 
				{
					switch ((static_cast<uint32_t>(codepoint) - 0x98F6u) / 10u)
					{
						case 0: return true;
						case 1: return true;
						case 2: return (codepoint >= U'\u9E0A' && codepoint <= U'\u9FEE')
								|| (codepoint >= U'\uA000' && codepoint <= U'\uA093');
								// total codepoints in chunk: 633

						case 3: return true;
						case 4: return (codepoint >= U'\uA31E' && codepoint <= U'\uA48C')
								|| (codepoint >= U'\uA4D0' && codepoint <= U'\uA4FD')
								|| (codepoint >= U'\uA500' && codepoint <= U'\uA5A7');
								// total codepoints in chunk: 581

						case 5: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0xA5A8u) / 2u)
							{
								case 0: return (codepoint >= U'\uA5A8' && codepoint <= U'\uA60C')
										|| (codepoint >= U'\uA610' && codepoint <= U'\uA61F')
										|| (codepoint >= U'\uA62A' && codepoint <= U'\uA62B')
										|| (codepoint >= U'\uA640' && codepoint <= U'\uA66E')
										|| (codepoint >= U'\uA67F' && codepoint <= U'\uA69D')
										|| (codepoint >= U'\uA6A0' && codepoint <= U'\uA6E5');
										// total codepoints in chunk: 267

								case 1: return (codepoint >= U'\uA717' && codepoint <= U'\uA71F')
										|| (codepoint >= U'\uA722' && codepoint <= U'\uA788')
										|| (codepoint >= U'\uA78B' && codepoint <= U'\uA7BF')
										|| (codepoint >= U'\uA7C2' && codepoint <= U'\uA7C6')
										|| (codepoint >= U'\uA7F7' && codepoint <= U'\uA801')
										|| (codepoint >= U'\uA803' && codepoint <= U'\uA805')
										|| (codepoint >= U'\uA807' && codepoint <= U'\uA80A')
										|| (codepoint >= U'\uA80C' && codepoint <= U'\uA822');
										// total codepoints in chunk: 211

							}
							// total codepoints in chunk: 478

						}
						case 6: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0xA832u) / 4u)
							{
								case 0: return (codepoint >= U'\uA840' && codepoint <= U'\uA873')
										|| (codepoint >= U'\uA882' && codepoint <= U'\uA8B3');
										// total codepoints in chunk: 102

								case 1: return (codepoint >= U'\uA8F2' && codepoint <= U'\uA8F7')
										|| codepoint == U'\uA8FB'
										|| (codepoint >= U'\uA8FD' && codepoint <= U'\uA8FE')
										|| (codepoint >= U'\uA90A' && codepoint <= U'\uA925')
										|| (codepoint >= U'\uA930' && codepoint <= U'\uA946')
										|| (codepoint >= U'\uA960' && codepoint <= U'\uA977');
										// total codepoints in chunk: 84

								case 2: return (codepoint >= U'\uA978' && codepoint <= U'\uA97C')
										|| (codepoint >= U'\uA984' && codepoint <= U'\uA9B2')
										|| codepoint == U'\uA9CF'
										|| (codepoint >= U'\uA9E0' && codepoint <= U'\uA9E4')
										|| (codepoint >= U'\uA9E6' && codepoint <= U'\uA9EF')
										|| (codepoint >= U'\uA9FA' && codepoint <= U'\uA9FE')
										|| (codepoint >= U'\uAA00' && codepoint <= U'\uAA1A');
										// total codepoints in chunk: 100

								case 3: return (codepoint >= U'\uAA1B' && codepoint <= U'\uAA28')
										|| (codepoint >= U'\uAA40' && codepoint <= U'\uAA42')
										|| (codepoint >= U'\uAA44' && codepoint <= U'\uAA4B')
										|| (codepoint >= U'\uAA60' && codepoint <= U'\uAA76')
										|| codepoint == U'\uAA7A'
										|| (codepoint >= U'\uAA7E' && codepoint <= U'\uAAAF')
										|| codepoint == U'\uAAB1'
										|| (codepoint >= U'\uAAB5' && codepoint <= U'\uAAB6')
										|| (codepoint >= U'\uAAB9' && codepoint <= U'\uAABB');
										// total codepoints in chunk: 105

							}
							// total codepoints in chunk: 391

						}
						case 7: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0xAABCu) / 3u)
							{
								case 0: 
								{
									switch ((static_cast<uint32_t>(codepoint) - 0xAABCu) / 2u)
									{
										case 0: 
										{
											switch ((static_cast<uint32_t>(codepoint) - 0xAABCu) / 2u)
											{
												case 0: return (codepoint >= U'\uAABC' && codepoint <= U'\uAABD')
														|| codepoint == U'\uAAC0'
														|| codepoint == U'\uAAC2'
														|| (codepoint >= U'\uAADB' && codepoint <= U'\uAADD')
														|| (codepoint >= U'\uAAE0' && codepoint <= U'\uAAEA')
														|| codepoint == U'\uAAF2';
														// total codepoints in chunk: 19

												case 1: return (codepoint >= U'\uAAF3' && codepoint <= U'\uAAF4')
														|| (codepoint >= U'\uAB01' && codepoint <= U'\uAB06')
														|| (codepoint >= U'\uAB09' && codepoint <= U'\uAB0E')
														|| (codepoint >= U'\uAB11' && codepoint <= U'\uAB16')
														|| (codepoint >= U'\uAB20' && codepoint <= U'\uAB26')
														|| codepoint == U'\uAB28';
														// total codepoints in chunk: 28

											}
											// total codepoints in chunk: 47

										}
										case 1: return (codepoint >= U'\uAB29' && codepoint <= U'\uAB2E')
												|| (codepoint >= U'\uAB30' && codepoint <= U'\uAB5A')
												|| (codepoint >= U'\uAB5C' && codepoint <= U'\uAB67')
												|| (codepoint >= U'\uAB70' && codepoint <= U'\uAB94');
												// total codepoints in chunk: 98

									}
									// total codepoints in chunk: 145

								}
								case 1: return (codepoint >= U'\uAB95' && codepoint <= U'\uABE2')
										|| (codepoint >= U'\uAC00' && codepoint <= U'\uAC6D');
										// total codepoints in chunk: 188

								case 2: return true;
							}
							// total codepoints in chunk: 549

						}
						case 8: return true;
						case 9: return true;
					}
					// total codepoints in chunk: 5880

				}
				case 7: return true;
				case 8: return (codepoint >= U'\uCBBA' && codepoint <= U'\uD7A2')
						|| (codepoint >= U'\uD7B0' && codepoint <= U'\uD7C6')
						|| (codepoint >= U'\uD7CB' && codepoint <= U'\uD7FB');
						// total codepoints in chunk: 3121

				case 9: 
				{
					switch ((static_cast<uint32_t>(codepoint) - 0xE51Cu) / 3u)
					{
						case 2: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0xF608u) / 3u)
							{
								case 1: 
								{
									switch ((static_cast<uint32_t>(codepoint) - 0xF8DAu) / 2u)
									{
										case 0: return (codepoint >= U'\uF900' && codepoint <= U'\uFA42');
												// total codepoints in chunk: 323

										case 1: 
										{
											switch ((static_cast<uint32_t>(codepoint) - 0xFA43u) / 2u)
											{
												case 0: return (codepoint >= U'\uFA43' && codepoint <= U'\uFA6D')
														|| (codepoint >= U'\uFA70' && codepoint <= U'\uFAD9');
														// total codepoints in chunk: 149

												case 1: 
												{
													switch ((static_cast<uint32_t>(codepoint) - 0xFAF8u) / 2u)
													{
														case 0: 
														{
															switch ((static_cast<uint32_t>(codepoint) - 0xFAF8u) / 2u)
															{
																case 0: return (codepoint >= U'\uFB00' && codepoint <= U'\uFB06')
																		|| (codepoint >= U'\uFB13' && codepoint <= U'\uFB17')
																		|| codepoint == U'\uFB1D'
																		|| (codepoint >= U'\uFB1F' && codepoint <= U'\uFB24');
																		// total codepoints in chunk: 19

																case 1: return (codepoint >= U'\uFB25' && codepoint <= U'\uFB28')
																		|| (codepoint >= U'\uFB2A' && codepoint <= U'\uFB36')
																		|| (codepoint >= U'\uFB38' && codepoint <= U'\uFB3C')
																		|| codepoint == U'\uFB3E'
																		|| (codepoint >= U'\uFB40' && codepoint <= U'\uFB41')
																		|| (codepoint >= U'\uFB43' && codepoint <= U'\uFB44')
																		|| (codepoint >= U'\uFB46' && codepoint <= U'\uFB51');
																		// total codepoints in chunk: 39

															}
															// total codepoints in chunk: 58

														}
														case 1: return true;
													}
													// total codepoints in chunk: 148

												}
											}
											// total codepoints in chunk: 297

										}
									}
									// total codepoints in chunk: 620

								}
								case 2: return (codepoint >= U'\uFBAC' && codepoint <= U'\uFBB1')
										|| (codepoint >= U'\uFBD3' && codepoint <= U'\uFD3D')
										|| (codepoint >= U'\uFD50' && codepoint <= U'\uFD8F')
										|| (codepoint >= U'\uFD92' && codepoint <= U'\uFDC7')
										|| (codepoint >= U'\uFDF0' && codepoint <= U'\uFDFB')
										|| (codepoint >= U'\uFE70' && codepoint <= U'\uFE74')
										|| (codepoint >= U'\uFE76' && codepoint <= U'\uFE7D');
										// total codepoints in chunk: 512

							}
							// total codepoints in chunk: 1132

						}
					}
					// total codepoints in chunk: 1132

				}
				case 10: 
				{
					switch ((static_cast<uint32_t>(codepoint) - 0xFE7Eu) / 21u)
					{
						case 0: return (codepoint >= U'\uFE7E' && codepoint <= U'\uFEFC')
								|| (codepoint >= U'\uFF21' && codepoint <= U'\uFF3A')
								|| (codepoint >= U'\uFF41' && codepoint <= U'\uFF5A')
								|| (codepoint >= U'\uFF66' && codepoint <= U'\uFFB3');
								// total codepoints in chunk: 257

						case 1: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0xFFB4u) / 2u)
							{
								case 0: 
								{
									switch ((static_cast<uint32_t>(codepoint) - 0xFFB4u) / 2u)
									{
										case 0: return (codepoint >= U'\uFFB4' && codepoint <= U'\uFFBE')
												|| (codepoint >= U'\uFFC2' && codepoint <= U'\uFFC7')
												|| (codepoint >= U'\uFFCA' && codepoint <= U'\uFFCF')
												|| (codepoint >= U'\uFFD2' && codepoint <= U'\uFFD7')
												|| (codepoint >= U'\uFFDA' && codepoint <= U'\uFFDC')
												|| (codepoint >= U'\U00010000' && codepoint <= U'\U00010001');
												// total codepoints in chunk: 34

										case 1: return (codepoint >= U'\U00010002' && codepoint <= U'\U0001000B')
												|| (codepoint >= U'\U0001000D' && codepoint <= U'\U00010026')
												|| (codepoint >= U'\U00010028' && codepoint <= U'\U0001003A')
												|| (codepoint >= U'\U0001003C' && codepoint <= U'\U0001003D')
												|| (codepoint >= U'\U0001003F' && codepoint <= U'\U0001004D');
												// total codepoints in chunk: 72

									}
									// total codepoints in chunk: 106

								}
								case 1: return (codepoint >= U'\U00010050' && codepoint <= U'\U0001005D')
										|| (codepoint >= U'\U00010080' && codepoint <= U'\U000100E9');
										// total codepoints in chunk: 120

							}
							// total codepoints in chunk: 226

						}
						case 2: return (codepoint >= U'\U000100EA' && codepoint <= U'\U000100FA');
								// total codepoints in chunk: 17

						case 3: return (codepoint >= U'\U00010280' && codepoint <= U'\U0001029C')
								|| (codepoint >= U'\U000102A0' && codepoint <= U'\U000102D0')
								|| (codepoint >= U'\U00010300' && codepoint <= U'\U0001031F')
								|| (codepoint >= U'\U0001032D' && codepoint <= U'\U00010340')
								|| (codepoint >= U'\U00010342' && codepoint <= U'\U00010349')
								|| (codepoint >= U'\U00010350' && codepoint <= U'\U00010355');
								// total codepoints in chunk: 144

						case 4: return (codepoint >= U'\U00010356' && codepoint <= U'\U00010375')
								|| (codepoint >= U'\U00010380' && codepoint <= U'\U0001039D')
								|| (codepoint >= U'\U000103A0' && codepoint <= U'\U000103C3')
								|| (codepoint >= U'\U000103C8' && codepoint <= U'\U000103CF')
								|| (codepoint >= U'\U00010400' && codepoint <= U'\U0001048B');
								// total codepoints in chunk: 246

						case 5: return (codepoint >= U'\U0001048C' && codepoint <= U'\U0001049D')
								|| (codepoint >= U'\U000104B0' && codepoint <= U'\U000104D3')
								|| (codepoint >= U'\U000104D8' && codepoint <= U'\U000104FB')
								|| (codepoint >= U'\U00010500' && codepoint <= U'\U00010527')
								|| (codepoint >= U'\U00010530' && codepoint <= U'\U00010563');
								// total codepoints in chunk: 182

						case 6: return (codepoint >= U'\U00010600' && codepoint <= U'\U000106F7');
								// total codepoints in chunk: 248

						case 7: return (codepoint >= U'\U000106F8' && codepoint <= U'\U00010736')
								|| (codepoint >= U'\U00010740' && codepoint <= U'\U00010755')
								|| (codepoint >= U'\U00010760' && codepoint <= U'\U00010767')
								|| (codepoint >= U'\U00010800' && codepoint <= U'\U00010805')
								|| codepoint == U'\U00010808'
								|| (codepoint >= U'\U0001080A' && codepoint <= U'\U0001082D');
								// total codepoints in chunk: 136

						case 8: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0x1082Eu) / 2u)
							{
								case 0: return (codepoint >= U'\U0001082E' && codepoint <= U'\U00010835')
										|| (codepoint >= U'\U00010837' && codepoint <= U'\U00010838')
										|| codepoint == U'\U0001083C'
										|| (codepoint >= U'\U0001083F' && codepoint <= U'\U00010855')
										|| (codepoint >= U'\U00010860' && codepoint <= U'\U00010876')
										|| (codepoint >= U'\U00010880' && codepoint <= U'\U0001089E');
										// total codepoints in chunk: 88

								case 1: return (codepoint >= U'\U000108E0' && codepoint <= U'\U000108F2')
										|| (codepoint >= U'\U000108F4' && codepoint <= U'\U000108F5')
										|| (codepoint >= U'\U00010900' && codepoint <= U'\U00010915')
										|| (codepoint >= U'\U00010920' && codepoint <= U'\U00010939');
										// total codepoints in chunk: 69

							}
							// total codepoints in chunk: 157

						}
						case 9: return (codepoint >= U'\U00010980' && codepoint <= U'\U000109B7')
								|| (codepoint >= U'\U000109BE' && codepoint <= U'\U000109BF')
								|| codepoint == U'\U00010A00'
								|| (codepoint >= U'\U00010A10' && codepoint <= U'\U00010A13')
								|| (codepoint >= U'\U00010A15' && codepoint <= U'\U00010A17')
								|| (codepoint >= U'\U00010A19' && codepoint <= U'\U00010A35')
								|| (codepoint >= U'\U00010A60' && codepoint <= U'\U00010A7C')
								|| (codepoint >= U'\U00010A80' && codepoint <= U'\U00010A99');
								// total codepoints in chunk: 150

						case 10: return (codepoint >= U'\U00010A9A' && codepoint <= U'\U00010A9C')
								|| (codepoint >= U'\U00010AC0' && codepoint <= U'\U00010AC7')
								|| (codepoint >= U'\U00010AC9' && codepoint <= U'\U00010AE4')
								|| (codepoint >= U'\U00010B00' && codepoint <= U'\U00010B35')
								|| (codepoint >= U'\U00010B40' && codepoint <= U'\U00010B55')
								|| (codepoint >= U'\U00010B60' && codepoint <= U'\U00010B72')
								|| (codepoint >= U'\U00010B80' && codepoint <= U'\U00010B91');
								// total codepoints in chunk: 152

						case 11: return (codepoint >= U'\U00010C00' && codepoint <= U'\U00010C48')
								|| (codepoint >= U'\U00010C80' && codepoint <= U'\U00010CB2')
								|| (codepoint >= U'\U00010CC0' && codepoint <= U'\U00010CF2')
								|| (codepoint >= U'\U00010D00' && codepoint <= U'\U00010D05');
								// total codepoints in chunk: 181

						case 12: return (codepoint >= U'\U00010D06' && codepoint <= U'\U00010D23');
								// total codepoints in chunk: 30

						case 13: return (codepoint >= U'\U00010F00' && codepoint <= U'\U00010F1C')
								|| codepoint == U'\U00010F27'
								|| (codepoint >= U'\U00010F30' && codepoint <= U'\U00010F45');
								// total codepoints in chunk: 52

						case 14: return (codepoint >= U'\U00010FE0' && codepoint <= U'\U00010FF6')
								|| (codepoint >= U'\U00011003' && codepoint <= U'\U00011037')
								|| (codepoint >= U'\U00011083' && codepoint <= U'\U000110A7');
								// total codepoints in chunk: 113

						case 15: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0x110A8u) / 2u)
							{
								case 0: return (codepoint >= U'\U000110A8' && codepoint <= U'\U000110AF')
										|| (codepoint >= U'\U000110D0' && codepoint <= U'\U000110E8')
										|| (codepoint >= U'\U00011103' && codepoint <= U'\U00011126');
										// total codepoints in chunk: 69

								case 1: return codepoint == U'\U00011144'
										|| (codepoint >= U'\U00011150' && codepoint <= U'\U00011172')
										|| codepoint == U'\U00011176'
										|| (codepoint >= U'\U00011183' && codepoint <= U'\U000111B2')
										|| (codepoint >= U'\U000111C1' && codepoint <= U'\U000111C4')
										|| codepoint == U'\U000111DA'
										|| codepoint == U'\U000111DC';
										// total codepoints in chunk: 91

							}
							// total codepoints in chunk: 160

						}
						case 16: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0x111DEu) / 2u)
							{
								case 0: return (codepoint >= U'\U00011200' && codepoint <= U'\U00011211')
										|| (codepoint >= U'\U00011213' && codepoint <= U'\U0001122B');
										// total codepoints in chunk: 43

								case 1: return (codepoint >= U'\U00011280' && codepoint <= U'\U00011286')
										|| codepoint == U'\U00011288'
										|| (codepoint >= U'\U0001128A' && codepoint <= U'\U0001128D')
										|| (codepoint >= U'\U0001128F' && codepoint <= U'\U0001129D')
										|| (codepoint >= U'\U0001129F' && codepoint <= U'\U000112A8')
										|| (codepoint >= U'\U000112B0' && codepoint <= U'\U000112DE')
										|| (codepoint >= U'\U00011305' && codepoint <= U'\U0001130C')
										|| (codepoint >= U'\U0001130F' && codepoint <= U'\U00011310')
										|| codepoint == U'\U00011313';
										// total codepoints in chunk: 95

							}
							// total codepoints in chunk: 138

						}
						case 17: return (codepoint >= U'\U00011314' && codepoint <= U'\U00011328')
								|| (codepoint >= U'\U0001132A' && codepoint <= U'\U00011330')
								|| (codepoint >= U'\U00011332' && codepoint <= U'\U00011333')
								|| (codepoint >= U'\U00011335' && codepoint <= U'\U00011339')
								|| codepoint == U'\U0001133D'
								|| codepoint == U'\U00011350'
								|| (codepoint >= U'\U0001135D' && codepoint <= U'\U00011361')
								|| (codepoint >= U'\U00011400' && codepoint <= U'\U00011434')
								|| (codepoint >= U'\U00011447' && codepoint <= U'\U00011449');
								// total codepoints in chunk: 98

						case 18: return codepoint == U'\U0001144A'
								|| codepoint == U'\U0001145F'
								|| (codepoint >= U'\U00011480' && codepoint <= U'\U000114AF')
								|| (codepoint >= U'\U000114C4' && codepoint <= U'\U000114C5')
								|| codepoint == U'\U000114C7';
								// total codepoints in chunk: 53

						case 19: return (codepoint >= U'\U00011580' && codepoint <= U'\U000115AE')
								|| (codepoint >= U'\U000115D8' && codepoint <= U'\U000115DB')
								|| (codepoint >= U'\U00011600' && codepoint <= U'\U0001162F')
								|| codepoint == U'\U00011644'
								|| (codepoint >= U'\U00011680' && codepoint <= U'\U000116AA');
								// total codepoints in chunk: 143

						case 20: return codepoint == U'\U000116B8'
								|| (codepoint >= U'\U00011700' && codepoint <= U'\U0001171A');
								// total codepoints in chunk: 28

					}
					// total codepoints in chunk: 2911

				}
				case 11: 
				{
					switch ((static_cast<uint32_t>(codepoint) - 0x117E0u) / 6u)
					{
						case 0: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0x117E0u) / 3u)
							{
								case 0: return (codepoint >= U'\U00011800' && codepoint <= U'\U0001182B')
										|| (codepoint >= U'\U000118A0' && codepoint <= U'\U000118DF')
										|| codepoint == U'\U000118FF';
										// total codepoints in chunk: 109

								case 1: 
								{
									switch ((static_cast<uint32_t>(codepoint) - 0x11949u) / 2u)
									{
										case 0: return (codepoint >= U'\U000119A0' && codepoint <= U'\U000119A7')
												|| (codepoint >= U'\U000119AA' && codepoint <= U'\U000119D0')
												|| codepoint == U'\U000119E1'
												|| codepoint == U'\U000119E3';
												// total codepoints in chunk: 49

										case 1: return codepoint == U'\U00011A00'
												|| (codepoint >= U'\U00011A0B' && codepoint <= U'\U00011A32')
												|| codepoint == U'\U00011A3A'
												|| codepoint == U'\U00011A50'
												|| (codepoint >= U'\U00011A5C' && codepoint <= U'\U00011A89')
												|| codepoint == U'\U00011A9D';
												// total codepoints in chunk: 90

									}
									// total codepoints in chunk: 139

								}
								case 2: return (codepoint >= U'\U00011AC0' && codepoint <= U'\U00011AF8')
										|| (codepoint >= U'\U00011C00' && codepoint <= U'\U00011C08')
										|| (codepoint >= U'\U00011C0A' && codepoint <= U'\U00011C1A');
										// total codepoints in chunk: 83

							}
							// total codepoints in chunk: 331

						}
						case 1: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0x11C1Bu) / 2u)
							{
								case 0: 
								{
									switch ((static_cast<uint32_t>(codepoint) - 0x11C1Bu) / 2u)
									{
										case 0: return (codepoint >= U'\U00011C1B' && codepoint <= U'\U00011C2E')
												|| codepoint == U'\U00011C40'
												|| (codepoint >= U'\U00011C72' && codepoint <= U'\U00011C8F')
												|| (codepoint >= U'\U00011D00' && codepoint <= U'\U00011D06')
												|| (codepoint >= U'\U00011D08' && codepoint <= U'\U00011D09')
												|| (codepoint >= U'\U00011D0B' && codepoint <= U'\U00011D29');
												// total codepoints in chunk: 91

										case 1: return (codepoint >= U'\U00011D2A' && codepoint <= U'\U00011D30')
												|| codepoint == U'\U00011D46'
												|| (codepoint >= U'\U00011D60' && codepoint <= U'\U00011D65')
												|| (codepoint >= U'\U00011D67' && codepoint <= U'\U00011D68')
												|| (codepoint >= U'\U00011D6A' && codepoint <= U'\U00011D89')
												|| codepoint == U'\U00011D98';
												// total codepoints in chunk: 49

									}
									// total codepoints in chunk: 140

								}
								case 1: return (codepoint >= U'\U00011EE0' && codepoint <= U'\U00011EF2')
										|| (codepoint >= U'\U00012000' && codepoint <= U'\U00012055');
										// total codepoints in chunk: 105

							}
							// total codepoints in chunk: 245

						}
						case 2: return (codepoint >= U'\U00012056' && codepoint <= U'\U00012399')
								|| (codepoint >= U'\U00012480' && codepoint <= U'\U00012490');
								// total codepoints in chunk: 853

						case 3: return (codepoint >= U'\U00012491' && codepoint <= U'\U00012543');
								// total codepoints in chunk: 179

						case 5: return (codepoint >= U'\U00013000' && codepoint <= U'\U00013141');
								// total codepoints in chunk: 322

					}
					// total codepoints in chunk: 1930

				}
				case 12: return (codepoint >= U'\U00013142' && codepoint <= U'\U0001342E')
						|| (codepoint >= U'\U00014400' && codepoint <= U'\U00014646');
						// total codepoints in chunk: 1332

				case 14: 
				{
					switch ((static_cast<uint32_t>(codepoint) - 0x16406u) / 2u)
					{
						case 0: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0x16406u) / 2u)
							{
								case 0: return (codepoint >= U'\U00016800' && codepoint <= U'\U00016A38')
										|| (codepoint >= U'\U00016A40' && codepoint <= U'\U00016A5E');
										// total codepoints in chunk: 600

								case 1: 
								{
									switch ((static_cast<uint32_t>(codepoint) - 0x16A5Fu) / 2u)
									{
										case 0: return (codepoint >= U'\U00016AD0' && codepoint <= U'\U00016AED')
												|| (codepoint >= U'\U00016B00' && codepoint <= U'\U00016B2F')
												|| (codepoint >= U'\U00016B40' && codepoint <= U'\U00016B43')
												|| (codepoint >= U'\U00016B63' && codepoint <= U'\U00016B77')
												|| (codepoint >= U'\U00016B7D' && codepoint <= U'\U00016B8F');
												// total codepoints in chunk: 122

										case 1: return (codepoint >= U'\U00016E40' && codepoint <= U'\U00016E7F')
												|| (codepoint >= U'\U00016F00' && codepoint <= U'\U00016F4A')
												|| codepoint == U'\U00016F50'
												|| (codepoint >= U'\U00016F93' && codepoint <= U'\U00016F9F')
												|| (codepoint >= U'\U00016FE0' && codepoint <= U'\U00016FE1')
												|| codepoint == U'\U00016FE3'
												|| (codepoint >= U'\U00017000' && codepoint <= U'\U000170B6');
												// total codepoints in chunk: 339

									}
									// total codepoints in chunk: 461

								}
							}
							// total codepoints in chunk: 1061

						}
						case 1: return true;
					}
					// total codepoints in chunk: 4310

				}
				case 15: return (codepoint >= U'\U00017D68' && codepoint <= U'\U000187F6')
						|| (codepoint >= U'\U00018800' && codepoint <= U'\U00018AF2');
						// total codepoints in chunk: 3458

				case 16: return (codepoint >= U'\U0001B000' && codepoint <= U'\U0001B02B');
						// total codepoints in chunk: 44

				case 17: return (codepoint >= U'\U0001B02C' && codepoint <= U'\U0001B11E')
						|| (codepoint >= U'\U0001B150' && codepoint <= U'\U0001B152')
						|| (codepoint >= U'\U0001B164' && codepoint <= U'\U0001B167')
						|| (codepoint >= U'\U0001B170' && codepoint <= U'\U0001B2FB')
						|| (codepoint >= U'\U0001BC00' && codepoint <= U'\U0001BC6A')
						|| (codepoint >= U'\U0001BC70' && codepoint <= U'\U0001BC7C')
						|| (codepoint >= U'\U0001BC80' && codepoint <= U'\U0001BC88')
						|| (codepoint >= U'\U0001BC90' && codepoint <= U'\U0001BC99');
						// total codepoints in chunk: 785

				case 18: 
				{
					switch ((static_cast<uint32_t>(codepoint) - 0x1C98Eu) / 6u)
					{
						case 2: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0x1D204u) / 3u)
							{
								case 1: 
								{
									switch ((static_cast<uint32_t>(codepoint) - 0x1D36Du) / 2u)
									{
										case 0: return (codepoint >= U'\U0001D400' && codepoint <= U'\U0001D421');
												// total codepoints in chunk: 34

										case 1: 
										{
											switch ((static_cast<uint32_t>(codepoint) - 0x1D422u) / 2u)
											{
												case 0: return (codepoint >= U'\U0001D422' && codepoint <= U'\U0001D454')
														|| (codepoint >= U'\U0001D456' && codepoint <= U'\U0001D47B');
														// total codepoints in chunk: 89

												case 1: return (codepoint >= U'\U0001D47C' && codepoint <= U'\U0001D49C')
														|| (codepoint >= U'\U0001D49E' && codepoint <= U'\U0001D49F')
														|| codepoint == U'\U0001D4A2'
														|| (codepoint >= U'\U0001D4A5' && codepoint <= U'\U0001D4A6')
														|| (codepoint >= U'\U0001D4A9' && codepoint <= U'\U0001D4AC')
														|| (codepoint >= U'\U0001D4AE' && codepoint <= U'\U0001D4B9')
														|| codepoint == U'\U0001D4BB'
														|| (codepoint >= U'\U0001D4BD' && codepoint <= U'\U0001D4C3')
														|| (codepoint >= U'\U0001D4C5' && codepoint <= U'\U0001D4D5');
														// total codepoints in chunk: 79

											}
											// total codepoints in chunk: 168

										}
									}
									// total codepoints in chunk: 202

								}
								case 2: 
								{
									switch ((static_cast<uint32_t>(codepoint) - 0x1D4D6u) / 2u)
									{
										case 0: 
										{
											switch ((static_cast<uint32_t>(codepoint) - 0x1D4D6u) / 2u)
											{
												case 0: return (codepoint >= U'\U0001D4D6' && codepoint <= U'\U0001D505')
														|| (codepoint >= U'\U0001D507' && codepoint <= U'\U0001D50A')
														|| (codepoint >= U'\U0001D50D' && codepoint <= U'\U0001D514')
														|| (codepoint >= U'\U0001D516' && codepoint <= U'\U0001D51C')
														|| (codepoint >= U'\U0001D51E' && codepoint <= U'\U0001D530');
														// total codepoints in chunk: 86

												case 1: return (codepoint >= U'\U0001D531' && codepoint <= U'\U0001D539')
														|| (codepoint >= U'\U0001D53B' && codepoint <= U'\U0001D53E')
														|| (codepoint >= U'\U0001D540' && codepoint <= U'\U0001D544')
														|| codepoint == U'\U0001D546'
														|| (codepoint >= U'\U0001D54A' && codepoint <= U'\U0001D550')
														|| (codepoint >= U'\U0001D552' && codepoint <= U'\U0001D58A');
														// total codepoints in chunk: 83

											}
											// total codepoints in chunk: 169

										}
										case 1: return true;
									}
									// total codepoints in chunk: 349

								}
							}
							// total codepoints in chunk: 551

						}
						case 3: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0x1D63Fu) / 2u)
							{
								case 0: 
								{
									switch ((static_cast<uint32_t>(codepoint) - 0x1D63Fu) / 2u)
									{
										case 0: return (codepoint >= U'\U0001D63F' && codepoint <= U'\U0001D6A5')
												|| (codepoint >= U'\U0001D6A8' && codepoint <= U'\U0001D6C0')
												|| (codepoint >= U'\U0001D6C2' && codepoint <= U'\U0001D6DA')
												|| (codepoint >= U'\U0001D6DC' && codepoint <= U'\U0001D6FA')
												|| (codepoint >= U'\U0001D6FC' && codepoint <= U'\U0001D714')
												|| (codepoint >= U'\U0001D716' && codepoint <= U'\U0001D734')
												|| (codepoint >= U'\U0001D736' && codepoint <= U'\U0001D74D');
												// total codepoints in chunk: 264

										case 1: return codepoint == U'\U0001D74E'
												|| (codepoint >= U'\U0001D750' && codepoint <= U'\U0001D76E')
												|| (codepoint >= U'\U0001D770' && codepoint <= U'\U0001D788')
												|| (codepoint >= U'\U0001D78A' && codepoint <= U'\U0001D7A8')
												|| (codepoint >= U'\U0001D7AA' && codepoint <= U'\U0001D7C2')
												|| (codepoint >= U'\U0001D7C4' && codepoint <= U'\U0001D7CB');
												// total codepoints in chunk: 121

									}
									// total codepoints in chunk: 385

								}
							}
							// total codepoints in chunk: 385

						}
						case 5: return (codepoint >= U'\U0001E100' && codepoint <= U'\U0001E12C')
								|| (codepoint >= U'\U0001E137' && codepoint <= U'\U0001E13D')
								|| codepoint == U'\U0001E14E'
								|| (codepoint >= U'\U0001E2C0' && codepoint <= U'\U0001E2EB');
								// total codepoints in chunk: 97

					}
					// total codepoints in chunk: 1033

				}
				case 19: 
				{
					switch ((static_cast<uint32_t>(codepoint) - 0x1E2F0u) / 7u)
					{
						case 1: return (codepoint >= U'\U0001E800' && codepoint <= U'\U0001E8C4')
								|| (codepoint >= U'\U0001E900' && codepoint <= U'\U0001E943')
								|| codepoint == U'\U0001E94B';
								// total codepoints in chunk: 266

						case 3: 
						{
							switch ((static_cast<uint32_t>(codepoint) - 0x1EDD3u) / 6u)
							{
								case 0: 
								{
									switch ((static_cast<uint32_t>(codepoint) - 0x1EDD3u) / 5u)
									{
										case 1: return (codepoint >= U'\U0001EE00' && codepoint <= U'\U0001EE03')
												|| (codepoint >= U'\U0001EE05' && codepoint <= U'\U0001EE10');
												// total codepoints in chunk: 16

										case 2: return (codepoint >= U'\U0001EE11' && codepoint <= U'\U0001EE1F')
												|| (codepoint >= U'\U0001EE21' && codepoint <= U'\U0001EE22')
												|| codepoint == U'\U0001EE24'
												|| codepoint == U'\U0001EE27'
												|| (codepoint >= U'\U0001EE29' && codepoint <= U'\U0001EE2F');
												// total codepoints in chunk: 26

										case 3: return (codepoint >= U'\U0001EE30' && codepoint <= U'\U0001EE32')
												|| (codepoint >= U'\U0001EE34' && codepoint <= U'\U0001EE37')
												|| codepoint == U'\U0001EE39'
												|| codepoint == U'\U0001EE3B'
												|| codepoint == U'\U0001EE42'
												|| codepoint == U'\U0001EE47'
												|| codepoint == U'\U0001EE49'
												|| codepoint == U'\U0001EE4B'
												|| (codepoint >= U'\U0001EE4D' && codepoint <= U'\U0001EE4E');
												// total codepoints in chunk: 15

										case 4: 
										{
											switch ((static_cast<uint32_t>(codepoint) - 0x1EE4Fu) / 2u)
											{
												case 0: return codepoint == U'\U0001EE4F'
														|| (codepoint >= U'\U0001EE51' && codepoint <= U'\U0001EE52')
														|| codepoint == U'\U0001EE54'
														|| codepoint == U'\U0001EE57'
														|| codepoint == U'\U0001EE59'
														|| codepoint == U'\U0001EE5B'
														|| codepoint == U'\U0001EE5D';
														// total codepoints in chunk: 8

												case 1: return codepoint == U'\U0001EE5F'
														|| (codepoint >= U'\U0001EE61' && codepoint <= U'\U0001EE62')
														|| codepoint == U'\U0001EE64'
														|| (codepoint >= U'\U0001EE67' && codepoint <= U'\U0001EE6A')
														|| (codepoint >= U'\U0001EE6C' && codepoint <= U'\U0001EE6D');
														// total codepoints in chunk: 10

											}
											// total codepoints in chunk: 18

										}
									}
									// total codepoints in chunk: 75

								}
								case 1: return (codepoint >= U'\U0001EE6E' && codepoint <= U'\U0001EE72')
										|| (codepoint >= U'\U0001EE74' && codepoint <= U'\U0001EE77')
										|| (codepoint >= U'\U0001EE79' && codepoint <= U'\U0001EE7C')
										|| codepoint == U'\U0001EE7E'
										|| (codepoint >= U'\U0001EE80' && codepoint <= U'\U0001EE89')
										|| (codepoint >= U'\U0001EE8B' && codepoint <= U'\U0001EE9B')
										|| (codepoint >= U'\U0001EEA1' && codepoint <= U'\U0001EEA3')
										|| (codepoint >= U'\U0001EEA5' && codepoint <= U'\U0001EEA9')
										|| (codepoint >= U'\U0001EEAB' && codepoint <= U'\U0001EEBB');
										// total codepoints in chunk: 66

							}
							// total codepoints in chunk: 141

						}
					}
					// total codepoints in chunk: 407

				}
				case 20: return (codepoint >= U'\U00020000' && codepoint <= U'\U000215B3');
						// total codepoints in chunk: 5556

				case 21: return true;
				case 22: return true;
				case 23: return true;
				case 24: return true;
				case 25: return true;
				case 26: return (codepoint >= U'\U0002949E' && codepoint <= U'\U0002A6D5')
						|| (codepoint >= U'\U0002A700' && codepoint <= U'\U0002ADFF');
						// total codepoints in chunk: 6456

				case 27: return (codepoint >= U'\U0002AE00' && codepoint <= U'\U0002B733')
						|| (codepoint >= U'\U0002B740' && codepoint <= U'\U0002B81C')
						|| (codepoint >= U'\U0002B820' && codepoint <= U'\U0002C761');
						// total codepoints in chunk: 6483

				case 28: return (codepoint >= U'\U0002C762' && codepoint <= U'\U0002CEA0')
						|| (codepoint >= U'\U0002CEB0' && codepoint <= U'\U0002E0C3');
						// total codepoints in chunk: 6483

				case 29: return (codepoint >= U'\U0002E0C4' && codepoint <= U'\U0002EBDF')
						|| (codepoint >= U'\U0002F800' && codepoint <= U'\U0002FA1D');
						// total codepoints in chunk: 3386

			}
			// total codepoints in chunk: 125582
			
			return false;
		}

		#endif

		[[nodiscard]] TOML_ALWAYS_INLINE
		constexpr bool is_decimal_digit(char32_t codepoint) noexcept
		{
			return (codepoint >= U'0' && codepoint <= U'9');
		}

		[[nodiscard]] TOML_ALWAYS_INLINE
		constexpr bool is_hex_digit(char32_t codepoint) noexcept
		{
			return (codepoint >= U'a' && codepoint <= U'f')
				|| (codepoint >= U'A' && codepoint <= U'F')
				|| is_decimal_digit(codepoint);
		}

		[[nodiscard]]
		constexpr uint32_t hex_digit_to_int(char32_t codepoint) noexcept
		{
			if (is_decimal_digit(codepoint))
				return static_cast<uint32_t>(codepoint - U'0');
			return 10u + static_cast<uint32_t>(codepoint - ((codepoint >= U'a' && codepoint <= U'f') ? U'a' : U'A'));
		}

		[[nodiscard]]
		constexpr bool is_bare_key_character(char32_t codepoint) noexcept
		{
			return is_letter(codepoint)
				|| is_decimal_digit(codepoint)
				|| codepoint == U'-'
				|| codepoint == U'_'
			;
		}

		[[nodiscard]]
		constexpr bool is_value_terminator(char32_t codepoint) noexcept
		{
			return is_line_break(codepoint)
				|| is_whitespace(codepoint)
				|| codepoint == U']'
				|| codepoint == U'}'
				|| codepoint == U','
				|| codepoint == U'#'
			;
		}

		// based on the decoder found here: http://bjoern.hoehrmann.de/utf-8/decoder/dfa/
		struct utf8_decoder final
		{
			uint32_t state{};
			uint32_t codepoint{};

			static constexpr uint8_t state_table[]
			{
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,		9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
				7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,		7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,
				8,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,		2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
				10,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,		11,6,6,6,5,8,8,8,8,8,8,8,8,8,8,8,

				0,12,24,36,60,96,84,12,12,12,48,72,		12,12,12,12,12,12,12,12,12,12,12,12,
				12, 0,12,12,12,12,12, 0,12, 0,12,12,	12,24,12,12,12,12,12,24,12,24,12,12,
				12,12,12,12,12,12,12,24,12,12,12,12,	12,24,12,12,12,12,12,12,12,24,12,12,
				12,12,12,12,12,12,12,36,12,36,12,12,	12,36,12,12,12,12,12,36,12,36,12,12,
				12,36,12,12,12,12,12,12,12,12,12,12
			};

			[[nodiscard]]
			constexpr bool error() const noexcept
			{
				return state == 12u;
			}

			[[nodiscard]]
			constexpr bool has_code_point() const noexcept
			{
				return state == 0u;
			}

			constexpr void operator () (uint8_t byte) noexcept
			{
				TOML_ASSERT(!error());

				const auto type = state_table[byte];

				codepoint = has_code_point()
					? (0xFFu >> type) & byte
					: (byte & 0x3Fu) | (codepoint << 6);

				state = state_table[state + 256u + type];
			};
		};

		template <typename T>
		class utf8_byte_stream;

		template <typename CHAR>
		class utf8_byte_stream<std::basic_string_view<CHAR>> final
		{
			static_assert(sizeof(CHAR) == 1_sz);

			private:
				std::basic_string_view<CHAR> source;
				size_t position = {};

			public:
				explicit constexpr utf8_byte_stream(std::basic_string_view<CHAR> sv) noexcept
					: source{ sv }
				{
					if (source.length() >= 3_sz
						&& static_cast<uint8_t>(source[0]) == 0xEF_u8
						&& static_cast<uint8_t>(source[1]) == 0xBB_u8
						&& static_cast<uint8_t>(source[2]) == 0xBF_u8)
					{
						position += 3_sz;
					}
				}

				[[nodiscard]]
				constexpr bool eof() const noexcept
				{
					return position >= source.length();
				}

				[[nodiscard]]
				constexpr bool error() const noexcept
				{
					return false;
				}

				[[nodiscard]]
				constexpr uint8_t operator() () noexcept
				{
					return static_cast<uint8_t>(source[position++]);
				}
		};

		template <typename CHAR>
		class utf8_byte_stream<std::basic_istream<CHAR>> final
		{
			static_assert(sizeof(CHAR) == 1_sz);

			private:
				std::basic_istream<CHAR>* source;

			public:
				explicit utf8_byte_stream(std::basic_istream<CHAR>& stream) noexcept
					: source{ &stream }
				{
					if (*source)
					{
						static constexpr uint8_t bom[] {
							0xEF_u8,
							0xBB_u8,
							0xBF_u8
						};

						using stream_traits = typename std::remove_pointer_t<decltype(source)>::traits_type;
						const auto initial_pos = source->tellg();
						size_t bom_pos{};
						auto bom_char = source->get();
						while (*source && bom_char != stream_traits::eof && bom_char == bom[bom_pos])
						{
							bom_pos++;
							bom_char = source->get();
						}
						if (!(*source) || bom_pos < 3_sz)
							source->seekg(initial_pos);
					}
				}

				[[nodiscard]]
				bool eof() const noexcept
				{
					return source->eof();
				}

				[[nodiscard]]
				bool error() const noexcept
				{
					return !(*source);
				}

				[[nodiscard]]
				uint8_t operator() ()
				{
					return static_cast<uint8_t>(source->get());
				}
		};

		struct utf8_codepoint final
		{
			char32_t value;
			document_position position;
			uint8_t byte_count;
			uint8_t bytes[4];

			template <typename CHAR = string_char>
			[[nodiscard]] TOML_ALWAYS_INLINE
			std::basic_string_view<CHAR> as_view() const noexcept
			{
				static_assert(
					sizeof(CHAR) == 1,
					"The string view's underlying character type must be 1 byte in size."
				);

				return std::basic_string_view<CHAR>{ reinterpret_cast<const CHAR* const>(bytes), byte_count };
			}

			[[nodiscard]]
			constexpr operator char32_t& () noexcept
			{
				return value;
			}

			[[nodiscard]]
			constexpr operator const char32_t& () const noexcept
			{
				return value;
			}
		};
		static_assert(std::is_trivial_v<utf8_codepoint>);
		static_assert(std::is_standard_layout_v<utf8_codepoint>);

		struct TOML_INTERFACE utf8_reader_interface
		{
			[[nodiscard]]
			virtual const std::shared_ptr<const string>& source_path() const noexcept = 0;

			[[nodiscard]]
			virtual const utf8_codepoint* read_next() = 0;
		};

		template <typename T>
		class TOML_EMPTY_BASES utf8_reader final
			: public utf8_reader_interface
		{
			private:
				utf8_byte_stream<T> stream;
				utf8_decoder decoder;
				utf8_codepoint prev{}, current{};
				std::shared_ptr<const string> source_path_;

			public:

				template <typename U, typename STR = string_view>
				explicit utf8_reader(U && source, STR&& source_path = {})
					noexcept(std::is_nothrow_constructible_v<utf8_byte_stream<T>, U&&>)
					: stream{ std::forward<U>(source) }
				{
					current.position.line = 1_sz;
					current.position.column = 1_sz;

					if (!source_path.empty())
						source_path_ = std::make_shared<const string>(std::forward<STR>(source_path));
				}

				[[nodiscard]]
				const std::shared_ptr<const string>& source_path() const noexcept override
				{
					return source_path_;
				}

				[[nodiscard]]
				const utf8_codepoint* read_next() override
				{
					if (stream.eof())
						return nullptr;
					if (stream.error())
						throw parse_error{ "The underlying stream entered an error state"s, prev.position, source_path_ };
					if (decoder.error())
						throw parse_error{ "Encountered invalid utf-8 sequence"s, prev.position, source_path_ };

					while (true)
					{
						uint8_t nextByte;
						if constexpr (noexcept(stream()))
						{
							nextByte = stream();
						}
						else
						{
							try
							{
								nextByte = stream();
							}
							catch (const std::exception& exc)
							{
								throw parse_error{ exc.what(), prev.position, source_path_ };
							}
							catch (...)
							{
								throw parse_error{ "An unspecified error occurred"s, prev.position, source_path_ };
							}
						}
						if (stream.error())
							throw parse_error{ "The underlying stream entered an error state"s, prev.position, source_path_ };

						decoder(nextByte);
						if (decoder.error())
							throw parse_error{ "Encountered invalid utf-8 sequence"s, prev.position, source_path_ };

						current.bytes[current.byte_count++] = nextByte;
						if (decoder.has_code_point())
						{
							prev = current;
							prev.value = static_cast<char32_t>(decoder.codepoint);

							current.byte_count = {};
							current.position.index++;
							if (is_line_break(prev.value) && prev.value != U'\r')
							{
								current.position.line++;
								current.position.column = 1_sz;
							}
							else
								current.position.column++;

							return &prev;
						}

						if (stream.eof())
							throw parse_error{ "Encountered EOF during incomplete utf-8 code point sequence"s, prev.position, source_path_ };
					}
				}
		};

		template <typename CHAR>
		utf8_reader(std::basic_string_view<CHAR>, string_view) -> utf8_reader<std::basic_string_view<CHAR>>;

		template <typename CHAR>
		utf8_reader(std::basic_istream<CHAR>&, string_view) -> utf8_reader<std::basic_istream<CHAR>>;

		class TOML_EMPTY_BASES utf8_buffered_reader final
			: public utf8_reader_interface
		{
			private:
				utf8_reader_interface& reader;
				struct
				{
					static constexpr size_t capacity = 31; //+1 for the 'head' stored in the underlying reader
					utf8_codepoint buffer[capacity];
					size_t count = {}, first = {};
				}
				history;
				const utf8_codepoint* head = {};
				size_t negative_offset = {};

			public:

				explicit utf8_buffered_reader(utf8_reader_interface& reader_)
					: reader{ reader_ }
				{}

				[[nodiscard]]
				const std::shared_ptr<const string>& source_path() const noexcept override
				{
					return reader.source_path();
				}

				[[nodiscard]]
				const utf8_codepoint* read_next() override
				{
					if (negative_offset)
					{
						negative_offset--;

						// an entry negative offset of 1 just means "replay the current head"
						if (!negative_offset) 
							return head;

						// otherwise step back into the history buffer
						else
							return history.buffer + ((history.first + history.count - negative_offset) % history.capacity);
					}
					else
					{
						// first character read from stream
						if (!history.count && !head) TOML_UNLIKELY
							head = reader.read_next();

						// subsequent characters and not eof
						else if (head)
						{
							if (history.count < history.capacity) TOML_UNLIKELY
								history.buffer[history.count++] = *head;
							else
								history.buffer[(history.first++ + history.capacity) % history.capacity] = *head;

							head = reader.read_next();
						}

						return head;
					}
				}

				[[nodiscard]]
				const utf8_codepoint* step_back(size_t count) noexcept
				{
					TOML_ASSERT(history.count);
					TOML_ASSERT(negative_offset + count <= history.count);
					negative_offset += count;

					return negative_offset
						? history.buffer + ((history.first + history.count - negative_offset) % history.capacity)
						: head;
				}
		};
	}
}
