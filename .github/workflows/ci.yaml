name: ci

on: [push, pull_request]

# This ensures that jobs get canceled when force-pushing
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  linux:
    strategy:
      fail-fast: false
      matrix:
        compiler: [ 'g++', 'clang' ]
        compile: [ true, false ]

    runs-on: ubuntu-latest
    container:
      image: debian:testing

    defaults:
      run:
        shell: sh

    steps:
    - name: Install dependencies
      run: |
        apt-get -y update
        apt-get -y install --no-install-recommends ${{ matrix.compiler }} lld meson pkgconf git ca-certificates locales-all python3-pip catch2 nlohmann-json3-dev

    - uses: actions/checkout@v2

    - name: Check toml.hpp
      run: |
        pip3 install --upgrade --requirement tools/requirements.txt 
        cd tools
        ./ci_single_header_check.py

    - name: Configure Meson
      run: |
        if [ ${{ matrix.compiler }} = g++ ]; then linker=gold; else linker=lld; fi
        CXX_LD=$linker meson setup build --buildtype=debug -Dcompile_library=${{ matrix.compile }} -Dpedantic=true -Dbuild_tests=true -Dbuild_examples=true -Dgenerate_cmake_config=false -Db_lto=false -Dasan_examples=true

    - name: Build
      run: meson compile -C build

    - name: Test
      run: meson test -C build --verbose

  windows:
    strategy:
      fail-fast: false
      matrix:
        compile: [ true, false ]

    runs-on: windows-2022

    defaults:
      run:
        shell: cmd

    steps:
    - name: Install dependencies
      run: |
        python3 -m pip install -U pip==21.3.1
        pip3 install meson ninja

    - uses: actions/checkout@v2
      with:
        submodules: true

    - uses: ilammy/msvc-dev-cmd@v1

    - name: Configure Meson
      run: meson setup --vsenv -Dcompile_library=${{ matrix.compile }} -Dpedantic=true -Dbuild_tests=true -Dbuild_examples=true -Dgenerate_cmake_config=false build

    - name: Build
      run: meson compile -C build

    - name: Test
      run: meson test -C build --verbose


  tipi-build-linux:
    name: tipi.build project build and dependency resolution 
    runs-on: ubuntu-latest
    container: tipibuild/tipi-ubuntu

    env:
      HOME: /root

    steps:
      - uses: actions/checkout@v2
      - run: mkdir -p ~/.tipi

      # checking if the tomlplusplus project builds and passes tests
      - name: Build as project target linux-cxx17 (run tests 'odr_test_1' and 'main')
        run: tipi . --dont-upgrade --verbose -t linux-cxx17 --test "odr_test_1|main"

      - name: Build as project target linux-cxx20 (run tests 'odr_test_1' and 'main')
        run: tipi . --dont-upgrade --verbose -t linux-cxx20 --test "odr_test_1|main"
      
      - name: Cleanup project builds
        run: rm -r ./build
      
      # trying if pulling the dependency with tipi works properly
      - name: Build as dependency
        run: |
          cd ./examples/tipi-example
          tipi . --dont-upgrade --verbose -t linux-cxx17
          ./build/linux-cxx17/bin/simple_parser_tipi ../example.toml